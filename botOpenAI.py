import telebot
import sqlite3
from telebot import types
from telegram import ParseMode
import datetime
import urllib.request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import os
import openai
from telebot import TeleBot
import urllib.request
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, ConversationHandler

from base64 import b64decode
import time
import json
CHAT_ID = 628446966
TELEGRAM_API_KEY = '5428270852:AAEbBDt8RiYgiizDEC7o5oTz4vl-x7Ls5ng'
openai.api_key = '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'
updater = Updater(token=TELEGRAM_API_KEY, use_context=True)
dispatcher = updater.dispatcher
bot = telebot.TeleBot(TELEGRAM_API_KEY)
def get_user_data(user_id):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT grypa, email, first_last FROM login_id WHERE id = {user_id}")
    data = cursor.fetchone()
    connect.close()
    return data
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            email TEXT NOT NULL,
            grypa TEXT NOT NULL,
            first_last TEXT NOT NULL,
            roli TEXT )""")

    connect.commit()
    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id} ")
    data = cursor.fetchone()
    if data is None:

        # –ó–∞–ø–∏—Ç email
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é email –∞–¥—Ä–µ—Å—É:")
        bot.register_next_step_handler(message, get_email)

    else:
        user_id = message.from_user.id
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
        user_rol = cursor.fetchone()
        if user_rol:
            user_rol = user_rol[0]
            if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
                item2 = types.KeyboardButton('‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä')
                item3 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤')
                jurnal = types.KeyboardButton('–ñ—É—Ä–Ω–∞–ª')
                item4 = types.KeyboardButton('–°—Ç–∞—Ä–æ—Å—Ç–∞–º')
                item5 = types.KeyboardButton('–î–æ–º–∞—à–∫–∞')
                item_menu = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤')
                item5_6 = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
                markup.add(item1, item2, item3, jurnal, item4, item5)
                markup.add(item_menu)
                markup.add(item5_6)
                bot.send_message(message.chat.id, "–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!".format(message.from_user), reply_markup=markup)
            elif user_rol == '–≤–∏–∫–ª–∞–¥–∞—á':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
                item2 = types.KeyboardButton('‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä')
                item3 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤')
                item4 = types.KeyboardButton('–í–∏–∫–ª–∞–¥–∞—á–∞–º')
                item_menu = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤')
                item5_6 = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
                markup.add(item1, item2, item3, item4)
                markup.add(item_menu)
                markup.add(item5_6)
                bot.send_message(message.chat.id, "–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!".format(message.from_user), reply_markup=markup)
            elif user_rol == '—Å—Ç—É–¥–µ–Ω—Ç':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
                item2 = types.KeyboardButton('‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä')
                item3 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤')
                jurnal = types.KeyboardButton('–ñ—É—Ä–Ω–∞–ª')
                item5 = types.KeyboardButton('–î–æ–º–∞—à–∫–∞')
                item_menu = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤')
                item5_6 = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
                markup.add(item1, item2, item3, jurnal, item5)
                markup.add(item_menu)
                markup.add(item5_6)
                bot.send_message(message.chat.id, "–¢–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!".format(message.from_user), reply_markup=markup)

def get_email(message: types.Message):
    email = message.text
    email = email.lower()
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute("SELECT email FROM login_id")
    rows = cursor.fetchall()
    emails = [row[0] for row in rows]  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑—ñ –∑–Ω–∞—á–µ–Ω—å email

    if email in emails:
        bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞ —Ç–∞–∫–æ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Å–≤–æ—é –∞–¥—Ä–µ—Å—É")
        bot.register_next_step_handler(message, get_email)

    elif email.startswith('/'):
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –∞ –Ω–µ –ø–æ—à—Ç—É –±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é —Ñ—ñ–∑–º–∞—Ç—ñ–≤—Å—å–∫—É –ø–æ—à—Ç—É: ")
        bot.register_next_step_handler(message, get_email)

    else:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Email_Base WHERE Email_Address=?", (email,))
        row = cursor.fetchone()
        cursor.execute("SELECT –ü–Ü–ü FROM Email_Base WHERE Email_Address=?", (email,))
        pib = cursor.fetchone()

        if row:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button2 = types.KeyboardButton("–¢–∞–∫")
            button1 = types.KeyboardButton("–ù—ñ")
            keyboard.add(button2, button1)
            bot.send_message(message.chat.id, f"{pib[0]}\n–ë—É–¥—å –ª–∞—Å–∫–∞ —Å–∫–∞–∂—ñ—Ç—å —Ü–µ –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ?", reply_markup=keyboard)
            bot.register_next_step_handler(message, get_first_last, email,pib)


        else:
            # Email does not exist, send error message
            bot.send_message(message.chat.id,"–í–∞—à–æ—ó –ø–æ—à—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö —Ñ—ñ–∑–º–∞—Ç—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –ø–æ—à—Ç—É —â–µ —Ä–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
            # Return to the get_email function to wait for the next input from the user
            bot.register_next_step_handler(message, get_email)
        cursor.close()
        conn.close()




def get_first_last(message,email,pib):
    text = message.text
    if text == "–¢–∞–∫":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button_student = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç")
        button_starosta = types.KeyboardButton("–°—Ç–∞—Ä–æ—Å—Ç–∞")
        button_vikladach = types.KeyboardButton("–í–∏–∫–ª–∞–¥–∞—á")
        keyboard.add(button_student, button_starosta, button_vikladach)
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)
        bot.register_next_step_handler(message, get_role, email,pib)

    elif text =="–ù—ñ":
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ç–æ–¥—ñ —Å–≤–æ—î –ü–Ü–ë:")
        bot.register_next_step_handler(message, get_first_last_2, email, pib)

    else:
        bot.send_message(message.chat.id,"–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, get_first_last, email, pib)

def get_first_last_2(message,email,pib):
    text = message.text
    pib = text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_student = types.KeyboardButton("–°—Ç—É–¥–µ–Ω—Ç")
    button_starosta = types.KeyboardButton("–°—Ç–∞—Ä–æ—Å—Ç–∞")
    button_vikladach = types.KeyboardButton("–í–∏–∫–ª–∞–¥–∞—á")
    keyboard.add(button_student, button_starosta, button_vikladach)
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)
    bot.register_next_step_handler(message, get_role, email, pib)

def get_role(message, email,pib):
    role = message.text

    if role.startswith('/'):
        bot.send_message(message.chat.id,"–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ —Ä–æ–ª—å")
        bot.register_next_step_handler(message, get_role, email,pib)

    elif role == '–°—Ç—É–¥–µ–Ω—Ç':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–°–û–§–Ü-11')
        item2 = types.KeyboardButton('–°–û–§–ê-12')
        item3 = types.KeyboardButton('–°–û–ú–Ü-13')
        item4 = types.KeyboardButton('–ö–ú-14')
        item5 = types.KeyboardButton('–°–û–Ü–ú-15')
        item6 = types.KeyboardButton('–Ü–Ü–ü-16')
        item7 = types.KeyboardButton('DA-17')
        item8 = types.KeyboardButton('–°–û–§–Ü-21')
        item9 = types.KeyboardButton('–°–û–ú–Ü-22')
        item10 = types.KeyboardButton('–°–û–Ü–ú-23')
        item11 = types.KeyboardButton('–°–û–§–ê-25')
        item12 = types.KeyboardButton('–ö–ù-26')
        item13 = types.KeyboardButton('–ö–ù-27')
        item14 = types.KeyboardButton('–°–û–§–Ü-31')
        item15 = types.KeyboardButton('–°–û–ú–Ü-32')
        item16 = types.KeyboardButton('–°–û–Ü–ú-33')
        item17 = types.KeyboardButton('–°–û–§–ê-35')
        item18 = types.KeyboardButton('–ö–ù-36')
        item19 = types.KeyboardButton('–°–û–§–Ü-41')
        item20 = types.KeyboardButton('–°–û–ú–Ü-42')
        item21 = types.KeyboardButton('–°–û–Ü–ú-43')
        item22 = types.KeyboardButton('–°–û–Ü–Ω—Å–∫-24')
        item23 = types.KeyboardButton('–º–°–û–§-11')
        item24 = types.KeyboardButton('–º–°–û–§-12')
        item25 = types.KeyboardButton('–º–°–û–Ü–Ω-13')
        item26 = types.KeyboardButton('–º–°–û–§-21')
        item27 = types.KeyboardButton('–º–°–û–ú-22')
        item28 = types.KeyboardButton('–º–°–û–Ü–Ω-23')
        keyboard.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13,
                     item14, item15, item16, item17, item18, item19, item20, item21, item22, item23, item24,
                     item25, item26, item27, item28)
        bot.send_message(message.chat.id,
                         "–ë—É–¥—å –ª–∞—Å–∫–∞, –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Å–≤–æ—î—ó –≥—Ä—É–ø–∏. –û–±–µ—Ä—ñ—Ç—å –¥—ñ–π—Å–Ω—É –≥—Ä—É–ø—É, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –Ω–µ –±—É–¥–µ –º–æ–∂–ª–∏–≤–∏–º. –Ø–∫—â–æ –ø–æ–º–∏–ª–∏–ª–∏—Å—è –∑ –≤–∏–±–æ—Ä–æ–º –≥—Ä—É–ø–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –≤ /support",
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, get_group_stud, email,role,pib)

    elif role == '–í–∏–∫–ª–∞–¥–∞—á':
        # –ó–∞–ø–∏—Ç –ø–∞—Ä–æ–ª—é –¥–ª—è —Ä–æ–ª—ñ –≤–∏–∫–ª–∞–¥–∞—á–∞
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞:")
        bot.register_next_step_handler(message, get_password,  role, email,pib)

    elif role == '–°—Ç–∞—Ä–æ—Å—Ç–∞':
        # –ó–∞–ø–∏—Ç –ø–∞—Ä–æ–ª—é –¥–ª—è —Ä–æ–ª—ñ —Å—Ç–∞—Ä–æ—Å—Ç–∏
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç–∏:")
        bot.register_next_step_handler(message, get_password, role, email,pib)

    else:
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –∑ –Ω–∞–¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫.")
        bot.register_next_step_handler(message, get_role, email,pib)
def get_password(message, role, email,pib):
    password = message.text

    if role == '–í–∏–∫–ª–∞–¥–∞—á' and password == '000':
        board = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìè')
        item2 = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üßë‚Äçüíª')
        item3 = types.KeyboardButton('–§—ñ–∑–∏–∫–∞üë®‚Äçüî¨')
        board.add(item1, item2, item3)
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ —è–∫–æ—ó –≤–∏ –∫–∞—Ñ–µ–¥—Ä–∏:", reply_markup=board)
        bot.register_next_step_handler(message, kafedra, email, role,pib)

    elif role == '–°—Ç–∞—Ä–æ—Å—Ç–∞' and password == '111':
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª—ñ —Å—Ç–∞—Ä–æ—Å—Ç–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö


        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–°–û–§–Ü-11')
        item2 = types.KeyboardButton('–°–û–§–ê-12')
        item3 = types.KeyboardButton('–°–û–ú–Ü-13')
        item4 = types.KeyboardButton('–ö–ú-14')
        item5 = types.KeyboardButton('–°–û–Ü–ú-15')
        item6 = types.KeyboardButton('–Ü–Ü–ü-16')
        item7 = types.KeyboardButton('DA-17')
        item8 = types.KeyboardButton('–°–û–§–Ü-21')
        item9 = types.KeyboardButton('–°–û–ú–Ü-22')
        item10 = types.KeyboardButton('–°–û–Ü–ú-23')
        item11 = types.KeyboardButton('–°–û–§–ê-25')
        item12 = types.KeyboardButton('–ö–ù-26')
        item13 = types.KeyboardButton('–ö–ù-27')
        item14 = types.KeyboardButton('–°–û–§–Ü-31')
        item15 = types.KeyboardButton('–°–û–ú–Ü-32')
        item16 = types.KeyboardButton('–°–û–Ü–ú-33')
        item17 = types.KeyboardButton('–°–û–§–ê-35')
        item18 = types.KeyboardButton('–ö–ù-36')
        item19 = types.KeyboardButton('–°–û–§–Ü-41')
        item20 = types.KeyboardButton('–°–û–ú–Ü-42')
        item21 = types.KeyboardButton('–°–û–Ü–ú-43')
        item22 = types.KeyboardButton('–°–û–Ü–Ω—Å–∫-24')
        item23 = types.KeyboardButton('–º–°–û–§-11')
        item24 = types.KeyboardButton('–º–°–û–§-12')
        item25 = types.KeyboardButton('–º–°–û–Ü–Ω-13')
        item26 = types.KeyboardButton('–º–°–û–§-21')
        item27 = types.KeyboardButton('–º–°–û–ú-22')
        item28 = types.KeyboardButton('–º–°–û–Ü–Ω-23')
        keyboard.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13,
                     item14, item15, item16, item17, item18, item19, item20, item21, item22, item23, item24,
                     item25, item26, item27, item28)
        bot.send_message(message.chat.id,
                         "–ë—É–¥—å –ª–∞—Å–∫–∞, –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Å–≤–æ—î—ó –≥—Ä—É–ø–∏. –û–±–µ—Ä—ñ—Ç—å –¥—ñ–π—Å–Ω—É –≥—Ä—É–ø—É, –æ—Å–∫—ñ–ª—å–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ –Ω–µ –±—É–¥–µ –º–æ–∂–ª–∏–≤–∏–º. –Ø–∫—â–æ –ø–æ–º–∏–ª–∏–ª–∏—Å—è –∑ –≤–∏–±–æ—Ä–æ–º –≥—Ä—É–ø–∏ –Ω–∞–ø–∏—à—ñ—Ç—å –≤ /support",
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, get_group_stud, email, role,pib)




    else:
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, get_password, role, email,pib)
def kafedra(message, email, role,pib):
    group = message.text
    if group not in ['–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìè', '–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üßë‚Äçüíª', '–§—ñ–∑–∏–∫–∞üë®‚Äçüî¨']:
        bot.send_message(message.chat.id, "–í–∏ —â–æ –∑ —Ö—ñ–º–±—ñ–æ?ü§®")
        bot.register_next_step_handler(message, kafedra, message, email, role,pib)

    elif group.startswith('/'):
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞ –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ—à—ñ –≤–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –Ω–∞–∑–≤—É –∫–∞—Ñ–µ–¥—Ä–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –∫–∞—Ñ–µ–¥—Ä—Éüò° ")
        bot.register_next_step_handler(message, kafedra, email, role,pib)
    else:
        bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—î –ø–æ–≤–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ —ñ–º\'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ')
        if group == '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìè':
            group = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫"
        elif group == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üßë‚Äçüíª':
            group = '–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫'
        elif group == '–§—ñ–∑–∏–∫–∞üë®‚Äçüî¨':
            group = '–§—ñ–∑–∏–∫'
        get(message, email, role, group, pib)


def get_group_stud(message,email,role,pib):
    group = message.text
    if group not in ['–°–û–ú–Ü-32', '–°–û–Ü–ú-33', '–°–û–§–ê-35', '–ö–ù-36', '–º–°–û–§-11', '–º–°–û–ú-12', '–°–û–§–Ü-41', '–°–û–ú–Ü-42', '–°–ûIM-43',
                     '–°–û–Ü–Ω—Å–∫-24', '–º–°–û–Ü–Ω-13', '–ö–ú-14', '–°–û–Ü–ú-15', '–Ü–Ü–ü-16', 'DA-17', '–°–û–§–Ü-21', '–°–û–§–Ü-21', '–°–û–ú–Ü-22',
                     '–ö–ù-26',
                     '–ö–ù-27', '–°–û–§–Ü-31', '–°–û–Ü–ú-23', '–°–û–§–ê-25', '–°–û–§–Ü-11', '–°–û–§–ê-12', '–°–û–ú–Ü-13', '–º–°–û–§-21', '–º–°–û–ú-22',
                     '–º–°–û–Ü–Ω-23']:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≥—Ä—É–ø—É –≤–∏–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑ —Å–≤–æ—é –≥—Ä—É–ø—É:")
        bot.register_next_step_handler(message, get_group_stud, email, role,pib)
    elif group.startswith('/'):
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞ –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ—à—ñ –≤–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –∞ –Ω–µ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—é –≥—Ä—É–ø—Éüò° ")
        bot.register_next_step_handler(message, get_group_stud, email,role,pib)
    else:
        group = message.text.upper().replace('-', '_')
        get(message, email, role, group,pib)
def get(message, email, role, group,pib):
    role = role.lower()
    email = email.lower()

    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    user_id = message.chat.id
    user_name = message.chat.username

    # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    cursor.execute("INSERT INTO login_id (id, username, email, grypa, first_last, roli) VALUES(?, ?, ?, ?, ?, ?);",
                   (user_id, user_name, email, group, pib, role))
    connect.commit()
    bot.send_message(message.chat.id, "–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
    create_rozklad_table(message)
def create_rozklad_table(message):
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≥—Ä—É–ø –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    groups = ['–°–û–ú–Ü-32', '–°–û–Ü–ú-33', '–°–û–§–ê-35', '–ö–ù-36', '–º–°–û–§-11', '–º–°–û–ú-12', '–°–û–§–Ü-41', '–°–û–ú–Ü-42', '–°–ûIM-43',
              '–°–û–Ü–Ω—Å–∫-24', '–º–°–û–Ü–Ω-13', '–ö–ú-14', '–°–û–Ü–ú-15', '–Ü–Ü–ü-16', 'DA-17', '–°–û–§–Ü-21', '–°–û–§–Ü-21', '–°–û–ú–Ü-22',
              '–ö–ù-26', '–ö–ù-27', '–°–û–§–Ü-31', '–°–û–Ü–ú-23', '–°–û–§–ê-25', '–°–û–§–Ü-11', '–°–û–§–ê-12', '–°–û–ú–Ü-13', '–º–°–û–§-21', '–º–°–û–ú-22',
              '–º–°–û–Ü–Ω-23']

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
    for group in groups:
        table_name = f"rosklad_{group.replace('-', '_')}"
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute(f"SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='{table_name}'")
        result = cursor.fetchone()
        if result[0] == 0:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
            cursor.execute(
                f"CREATE TABLE {table_name} (–ü–µ—Ä—à–∞ TEXT, –¥—Ä—É–≥–∞ TEXT, —Ç—Ä–µ—Ç—è TEXT, —á–µ—Ç–≤–µ—Ä—Ç–∞ TEXT, –ø—è—Ç–∞ TEXT)")
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è "–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞" —É –≤—Å—ñ —Å—Ç–æ–≤–ø—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute(
                f"INSERT INTO {table_name} (–ü–µ—Ä—à–∞, –¥—Ä—É–≥–∞, —Ç—Ä–µ—Ç—è, —á–µ—Ç–≤–µ—Ä—Ç–∞, –ø—è—Ç–∞) VALUES ('–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞')")
            cursor.execute(
                f"INSERT INTO {table_name} (–ü–µ—Ä—à–∞, –¥—Ä—É–≥–∞, —Ç—Ä–µ—Ç—è, —á–µ—Ç–≤–µ—Ä—Ç–∞, –ø—è—Ç–∞) VALUES ('–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞')")
            cursor.execute(
                f"INSERT INTO {table_name} (–ü–µ—Ä—à–∞, –¥—Ä—É–≥–∞, —Ç—Ä–µ—Ç—è, —á–µ—Ç–≤–µ—Ä—Ç–∞, –ø—è—Ç–∞) VALUES ('–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞')")
            cursor.execute(
                f"INSERT INTO {table_name} (–ü–µ—Ä—à–∞, –¥—Ä—É–≥–∞, —Ç—Ä–µ—Ç—è, —á–µ—Ç–≤–µ—Ä—Ç–∞, –ø—è—Ç–∞) VALUES ('–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞', '–ø–∞—Ä–∞ —â–µ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞')")

    connect.commit()  # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–º—ñ–Ω–∏ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cursor.close()
    connect.close()
    message_handler_start(message)
###############################################################################################################################################################################
@bot.message_handler(commands=['shurik'])
def shurik(message):
    bot.send_message(message.chat.id, "–ü–æ–º—ñ–¥–æ—Ä –≤–∞—à–µ –ø—î—Ä—Å—ñ–∫, –º–∞–º–æ—é —Ç–≤–æ—î—é –∫–ª—è–Ω—É—Å—å".format(message.from_user))
@bot.message_handler(commands=['legion'])
def legion(message):
    bot.send_message(message.chat.id, "–ø—à—à –ø—à—à –ø—à—à –û–ª–µ–≥ –ø—É–∫–Ω—É–≤\n—Ü–µ –û–ª–µ–≥ @phantomkahueta ".format(message.from_user))
#####################################################################################################################
@bot.message_handler(commands=['gen'])
def generate(message):
    text = "–¶—è –≥—Ä—É–ø–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
    bot.send_message(chat_id=message.chat.id, text=text, disable_notification=True)

def generate_1(message):
    prompt = message.text
    response = openai.Image.create(
        prompt=prompt,
        n=1,
        size='1024x1024',
        response_format='b64_json'
    )
    with open('data.json', 'w') as file:
        json.dump(response, file, indent=4, ensure_ascii=False)

    image_data = b64decode(response['data'][0]['b64_json'])
    file_name = '_'.join(prompt.split(' '))

    with open(f'{file_name}.png', 'wb') as file:
        file.write(image_data)


    with open(f'{file_name}.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)
        bot.send_message(message.chat.id,f"–û—Å—å —Ç–≤–æ—î —Ñ–æ—Ç–æ –∑–≥—ñ–¥–Ω–æ —Ç–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É:\n{prompt}")

######################################################################################################################

@bot.message_handler(commands=['delete'])
def delete(message):
    # –∑–∞–ø–∏—Ç—É—î–º–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–π–¥—ñ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    chat_id = message.chat.id
    if chat_id != CHAT_ID:
        bot.send_message(chat_id=chat_id, text='–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.')
        return
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ")
        bot.register_next_step_handler(message, handle_user_id)
def handle_user_id(message):
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤–≤–µ–¥–µ–Ω–µ –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_id = message.text

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    delete_user(user_id)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.send_message(message.chat.id, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –∞–π–¥—ñ {user_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π.")
def delete_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cursor.execute("DELETE FROM login_id WHERE id=?", (user_id,))
    conn.commit()
@bot.message_handler(commands=['support'])
def message_handler_support(message):
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "üîô–ù–∞–∑–∞–¥"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(item_back)
    bot.send_message(chat_id=message.chat.id,
                     text='<b>–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞ –æ–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ –∑ —è–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—â–∞–º–∏ –≤–∏ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è?</b>',
                     parse_mode=ParseMode.HTML, reply_markup=markup)
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∑ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.register_next_step_handler(message, support_reply_handler)
def support_reply_handler(message):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        # –í–∏–∫–ª–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "/start" –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "üîô–ù–∞–∑–∞–¥"
        message_handler_start(message)
    else:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
        bot.send_message(chat_id=628446966,
                         text=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≤–µ—Ä–Ω—É–≤—Å—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é:\n–ê–π–¥—ñ: {message.chat.id}\n–ù—ñ–∫: @{message.chat.username}\n–¢–µ–∫—Å—Ç: {message.text}')
        bot.send_message(chat_id=message.chat.id,
                         text='–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.')
@bot.message_handler(commands=['idea'])
def message_handler_idea(message):
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "üîô–ù–∞–∑–∞–¥"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(item_back)
    bot.send_message(chat_id=message.chat.id,
                     text='<b>–Ø–∫–∞ —É –≤–∞—Å —î —ñ–¥–µ—è –¥–ª—è –º–µ–Ω–µ? –ù–∞–ø–∏—à—ñ—Ç—å —ó—ó, —ñ –º–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—ó —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.</b>',
                     parse_mode=ParseMode.HTML, reply_markup=markup)
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É –∑ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    bot.register_next_step_handler(message, idea_reply_handler)
def idea_reply_handler(message):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        # –í–∏–∫–ª–∏–∫ –∫–æ–º–∞–Ω–¥–∏ "/start" –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "üîô–ù–∞–∑–∞–¥"
        message_handler_start(message)
    else:
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ–¥–µ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        bot.send_message(chat_id=628446966,
                         text=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞–≤ —ñ–¥–µ—é –¥–ª—è –±–æ—Ç–∞:\n–ê–π–¥—ñ: {message.chat.id}\n–ù—ñ–∫: @{message.chat.username}\n–¢–µ–∫—Å—Ç: {message.text}')
        bot.send_message(chat_id=message.chat.id,
                         text='–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É —ñ–¥–µ—é! –ú–∏ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—ó –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É.')
@bot.message_handler(commands=['userhelp'])
def send_help(message):
    # –∑–∞–ø–∏—Ç—É—î–º–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–π–¥—ñ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    uhat_id = message.chat.id
    if uhat_id != CHAT_ID:
        bot.send_message(chat_id=uhat_id, text='–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.')
        return
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∞–π–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ")
        bot.register_next_step_handler(message, get_recipient_id)
def get_recipient_id(message):
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–π–¥—ñ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø–∏—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    recipient_id = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, send_message, recipient_id)
def send_message(message, recipient_id):
    # –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–≤–µ–¥–µ–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –≤–≤–µ–¥–µ–Ω–∏–º –∞–π–¥—ñ
    try:
        bot.send_message(recipient_id, message.text)
        bot.send_message(message.chat.id, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")
@bot.message_handler(content_types=['voice', 'video_note'])
def handle_message(message):
    channel_id = '-1001955388901'
    if message.voice:
        # –û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.forward_message(chat_id=channel_id, from_chat_id=message.chat.id, message_id=message.message_id)
    elif message.video_note:
        # –û—Ç—Ä–∏–º–∞–Ω–æ –∫—Ä—É–∂–µ—á–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        bot.forward_message(chat_id=channel_id, from_chat_id=message.chat.id, message_id=message.message_id)
@bot.message_handler(commands=['news'])
def send_news(message):
    # –ó–∞–ø–∏—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—ñ—Å–ª–∞—Ç–∏
    bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:')
    bot.register_next_step_handler(message, news_handler)
def news_handler(message):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –π–æ–≥–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞
    news = message.text
    users = get_all_users()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞
    blocked_users = []
    for user in users:
        try:
            bot.send_message(chat_id=user, text=news)
        except telebot.apihelper.ApiTelegramException as e:
            if e.result.status_code == 403:
                blocked_users.append(user)
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    if blocked_users:
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        blocked_users_text = '\n'.join([str(user) for user in blocked_users])
        error_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ {blocked_users_text} –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞."
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
        bot.send_message(chat_id=CHAT_ID, text=error_message)
def get_all_users():
    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ç–∞–±–ª–∏—Ü—ñ login_id
    cursor.execute("SELECT id FROM login_id")
    users = cursor.fetchall()
    # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    cursor.close()
    conn.close()
    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    return [user[0] for user in users]
def menu_starostam(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥')
    item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–æ–º')
    homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–∫—É')
    item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
    back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')

    markup.add(back)
    markup.add(item1)
    markup.add(item2)
    markup.add(homework)
    markup.add(item4)
    bot.send_message(message.chat.id, "–¶–µ –º–µ–Ω—é –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç, —ñ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π, —è–∫—ñ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñüòå".format(message.from_user), reply_markup=markup)


def menu_vikladacham(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
    homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
    item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
    back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(back)
    markup.add(item2)
    markup.add(homework)
    markup.add(item4)
    bot.send_message(message.chat.id,"–í–∏ –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞–º –æ–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏".format(message.from_user), reply_markup=markup)
    bot.register_next_step_handler(message,menu_vikladacham_2)



def menu_vikladacham_2(message):
    text = message.text
    if text == '–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏':
        menu_vikladacham_3_1(message)

    elif text == '–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î':
        bot.send_message(message.chat.id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∏ —â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        bot.register_next_step_handler(message, menu_vikladacham_2)
    elif text == '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏':
        bot.send_message(message.chat.id, "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∏—â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        bot.register_next_step_handler(message, menu_vikladacham_2)
    elif text == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î(")
        bot.register_next_step_handler(message, menu_vikladacham_2)
def menu_vikladacham_3_1(message):
    user_id = message.from_user.id

    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT DISTINCT –≥—Ä—É–ø–∞ FROM "{user_id}_tea"')
    res = cursor.fetchall()
    gryp = [item for tpl in res for item in tpl]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
    for i in gryp:
        markup.add(i)
    conn.close()
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏", reply_markup=markup)
    bot.register_next_step_handler(message, menu_vikladacham_3, gryp, user_id)
def menu_vikladacham_3(message,gryp,user_id):
    text = message.text
    if text == 'üîô–ù–∞–∑–∞–¥':
        menu_vikladacham_2(message)
    elif text in gryp:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ø—Ä–µ–¥–º–µ—Ç FROM '{user_id}_tea' WHERE –≥—Ä—É–ø–∞ = ?",(text,))
        res = cursor.fetchall()
        res = [item for tpl in res for item in tpl]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        for i in res:
            markup.add(i)
        conn.close()
        bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ {text}",reply_markup=markup)
        grypa = text
        bot.register_next_step_handler(message, menu_vikladacham_4, grypa, user_id)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–Ω—Ç—É –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, menu_vikladacham_3, gryp, user_id)
def menu_vikladacham_4(message, grypa, user_id):
    subject = message.text
    subject = subject.lower()
    db_filename = grypa + '.db'
    if os.path.exists(db_filename):

        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏ ")
        res = cursor.fetchall()
        res = [item for tpl in res for item in tpl]
        if subject == 'üîô–Ω–∞–∑–∞–¥':
            menu_vikladacham(message)
        elif subject in res:
            cursor.execute(f"SELECT –§–æ—Ä–º–∞_–ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ_–∫–æ–Ω—Ç—Ä–æ–ª—é FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?",(subject,))
            key = cursor.fetchall()
            key = [item for tpl in key for item in tpl]
            key = ''.join([str(i) for i in key])
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–ú–æ–¥—É–ª—å 1')
            item2 = types.KeyboardButton('–ú–æ–¥—É–ª—å 2')
            item3 = types.KeyboardButton('–Ü–ù–î–ó')
            item5 = types.KeyboardButton(f'–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ–¥—Ä–∞–∑—É {key}')
            item4 = types.KeyboardButton('–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏')
            close_sub = types.KeyboardButton('–ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item1,item2)
            markup.add(item5)
            markup.add(item3)
            markup.add(item4)
            markup.add(close_sub)
            bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –≤ –ø—Ä–µ–¥–º–µ—Ç—ñ {subject}, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –¥–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É –∞–±–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç(–§—É–Ω–∫—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–±–∏—Ä–∞—î –∑–º–æ–≥—É –≤ —Å—Ç–∞—Ä–æ—Å—Ç —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂—É—Ä–Ω–∞–ª —ó–º –±—É–¥–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥)", reply_markup=markup)
            conn.close()
            bot.register_next_step_handler(message, menu_vikladacham_5, db_filename, subject,key)

        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
            homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
            item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item2)
            markup.add(homework)
            markup.add(item4)
            bot.send_message(message.chat.id,"–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É —Å—Ç–∞—Ä–æ—Å—Ç–∞ –Ω–µ –¥–æ–¥–∞–ª–∞ –≤ —Å–≤—ñ–π –∂—É—Ä–Ω–∞–ª",reply_markup=markup)
            bot.register_next_step_handler(message, menu_vikladacham_2)



    else:  # 2_1234
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
        homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
        item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
        back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
        markup.add(back)
        markup.add(item2)
        markup.add(homework)
        markup.add(item4)
        bot.send_message(message.chat.id, f"–°—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–∏ {grypa} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∞ –∂—É—Ä–Ω–∞–ª –∑–≤–µ—Ä–Ω—ñ—Ç—å –¥–æ –Ω–µ—ó –∑ —Ü–∏–º –ø—Ä–æ—Ö–∞–Ω–Ω—è–º", reply_markup=markup)
        bot.register_next_step_handler(message,menu_vikladacham_2)
def menu_vikladacham_5(message, db_filename,subject,key):
    text = message.text
    if text == '–ú–æ–¥—É–ª—å 1' or text == '–ú–æ–¥—É–ª—å 2':
        if text == '–ú–æ–¥—É–ª—å 1':
            table = '1'
        elif text == '–ú–æ–¥—É–ª—å 2':
            table = '2'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
        item1 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É')
        item7 = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–¥ –æ—Ü—ñ–Ω–æ–∫')
        item2 = types.KeyboardButton('–†–µ–¥. –Ω–∞–∑–≤—É —Ç–µ–º—É')  #
        item3 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —Ç–µ–º—É')  #
        item5 = types.KeyboardButton('–ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥—É–ª—å') #
        markup.add(back)
        markup.add(item1,item7)
        markup.add(item2, item3)
        markup.add(item5)
        bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤ –∂—É—Ä–Ω–∞–ª—ñ –ø—Ä–µ–¥–º–µ—Ç—É {subject}, —É —Ä–æ–∑—ñ–¥—ñ–ª—ñ {text}", reply_markup=markup)
        bot.register_next_step_handler(message, menu_vikladacham_add_grate_modul, db_filename, subject, table,key)



    elif text == '–Ü–ù–î–ó':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()

        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()


        students_list = "\n".join([student[0] + ' - ' for student in students])
        gryp = db_filename.split('.')

        bot.send_message(message.chat.id,f"–û—Å—å –∑–Ω–∏–∑—É —è –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–∏ {gryp[0]} –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —á–µ—Ä–µ–∑ - –Ω–∞–≤–ø—Ä–æ—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–∫—â–æ –±—ñ–ª—è —è–∫–æ–≥–æ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–∫–∏ –∞–±–æ –≤—ñ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–≤ –±–∞–ª—ñ–≤ –º–æ–∂–µ—Ç–µ —Å–º—ñ–ª–æ —Å—Ç–∞–≤–∏—Ç–∏ 0 –∞–±–æ –Ω—ñ—á–æ–≥–æ —ñ —Å—Ç–µ—Ä—Ç–∏ –π–æ–≥–æ —ñ–∑ —Å–ø–∏—Å–∫—É –≤–∫–∞–∂—ñ—Ç—å –æ—Ü—ñ–Ω–∫–∏ –∑–∞ –∑—Ä–∞–∑–∫–æ–º", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id,
                         "–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞ - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞ - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞  - –æ—Ü—ñ–Ω–∫–∞")
        bot.send_message(message.chat.id, f"<code>{students_list}</code>", parse_mode=ParseMode.HTML)
        bot.register_next_step_handler(message,indz_2, db_filename, subject)


    elif text == f'–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ–¥—Ä–∞–∑—É {key}':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()

        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()


        students_list = "\n".join([student[0] + ' - ' for student in students])
        gryp = db_filename.split('.')

        bot.send_message(message.chat.id,f'–û—Å—å –∑–Ω–∏–∑—É —è –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–∏ {gryp[0]} –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ –∑ {key} —á–µ—Ä–µ–∑ " - " –Ω–∞–≤–ø—Ä–æ—Ç–∏ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —è–∫—â–æ –±—ñ–ª—è —è–∫–æ–≥–æ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–º–∞—î –æ—Ü—ñ–Ω–∫–∏ –∞–±–æ –≤—ñ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–≤ –±–∞–ª—ñ–≤ –º–æ–∂–µ—Ç–µ —Å–º—ñ–ª–æ —Å—Ç–∞–≤–∏—Ç–∏ 0 –∞–±–æ –Ω—ñ—á–æ–≥–æ —ñ —Å—Ç–µ—Ä—Ç–∏ –π–æ–≥–æ —ñ–∑ —Å–ø–∏—Å–∫—É –≤–∫–∞–∂—ñ—Ç—å –æ—Ü—ñ–Ω–∫–∏ –∑–∞ –∑—Ä–∞–∑–∫–æ–º',reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id,"–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞ - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞ - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞  - –æ—Ü—ñ–Ω–∫–∞")
        bot.send_message(message.chat.id,f"–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–∏ {gryp[0]}:\n <code>{students_list}</code>", parse_mode=ParseMode.HTML)
        bot.register_next_step_handler(message,exam_assessment, db_filename, subject, key)


    elif text == '–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏':
        bot.send_message(message.chat.id, f"–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
    elif text == '–ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = '{subject}'")
        close = cursor.fetchone()
        result_variable = close[0]

        if result_variable == '–ó–∞–∫—Ä–∏—Ç–∏–π –ø—Ä–µ–¥–º–µ—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–¢–∞–∫')
            item2 = types.KeyboardButton('–ù—ñ')
            markup.add(item1, item2)
            bot.send_message(message.chat.id,"–ü—Ä–µ–¥–º–µ—Ç –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∏–π –º–æ–∂–ª–∏–≤–æ –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –π–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏?)))",reply_markup=markup)
            bot.register_next_step_handler(message, open_subject, db_filename, subject)
        else:
            close_subject(message, db_filename, subject)
def open_subject(message,db_filename,subject):
    text = message.text
    if text == '–¢–∞–∫':
        subject = subject.replace("_", " ")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_1 = NULL WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?',(subject,))
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_2 = NULL WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?', (subject,))
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç = NULL WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?', (subject,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–º–µ—Ç {subject} –≤—ñ–¥–∫—Ä–∏—Ç–∏–π ")
        menu_vikladacham(message)
    elif text == '–ù—ñ':
        menu_vikladacham(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, open_subject, db_filename, subject)
def close_subject(message,db_filename,subject):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–¢–∞–∫ü•∂')
    item2 = types.KeyboardButton('–ù—ñü•µ')
    markup.add(item1, item2)
    bot.send_message(message.chat.id,
                     f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–µ–¥–º–µ—Ç—É {subject}. –ß–∏ –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–∑–±–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä–æ—Å—Ç —Å—Ç–∞—Ç—É—Å—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É? –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∏–∂—á–µ.",
                     reply_markup=markup)
    bot.register_next_step_handler(message, close_subject_2, db_filename, subject)
def close_subject_2(message,db_filename,subject):
    text = message.text
    if text == '–¢–∞–∫ü•∂':
        subject = subject.replace("_", " ")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        a = '–ó–∞–∫—Ä–∏—Ç–∏–π –ø—Ä–µ–¥–º–µ—Ç'
        a1 = '–ó–∞–∫—Ä–∏—Ç–∏–π –º–æ–¥—É–ª—å 1'
        a2 = '–ó–∞–∫—Ä–∏—Ç–∏–π –º–æ–¥—É–ª—å 2'
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_1 = ? WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?',(a1,subject))
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_2 = ? WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?', (a2, subject))
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç = ? WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?', (a, subject))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id,"–ü—Ä–µ–¥–º–µ—Ç –∑–∞–∫—Ä–∏—Ç–∏–πüòí")
        time.sleep(2)
        bot.send_message(message.chat.id, "–ù–∞–¥—ñ—é—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∏ –Ω–µ –±—É–¥—É—Ç—å –Ω–∞ –≤–∞—Å –¥—É—Ç–∏—Å—èüòã")
        time.sleep(1)

        menu_vikladacham(message)
    elif text == '–ù—ñü•µ':
        menu_vikladacham(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, close_subject_2, db_filename, subject)
def exam_assessment(message, db_filename, subject, key):
    text = message.text
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    rows = text.split("\n")
    subject = subject.replace(" ","_")
    split = []
    splitnot = []
    for row in rows:
        student_data = row.split(" - ")
        if len(student_data) == 2:
            split.append(row)

        else:
            splitnot.append(row)

    if len(splitnot) == 0:
        for row in split:
            student_data = row.split(" - ")
            name, grade = student_data
            cursor.execute(f"UPDATE {subject}_3 SET [{key}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",(grade, name))
            cursor.execute(f"UPDATE {subject}_–°—Ç—É–¥–µ–Ω—Ç–∏ SET [{key}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",(grade, name))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        table_name = f'{subject}_1'
        jurnal1_5_dodavanna_ocinok(message, db_filename, table_name, subject)


    elif len(splitnot) > 0:
        list = tuple(splitnot)
        message_text = "\n\n".join(list)
        bot.send_message(message.chat.id,
                         f"{message_text} –û—Å—å —Ü—ñ —Ä—è–¥–∫–∏ —è –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞")
        bot.register_next_step_handler(message,exam_assessment, db_filename, subject, key)
def menu_vikladacham_add_grate_modul(message, db_filename,subject, table,key):
    text = message.text
    if text.startswith('/'):
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –±—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–º —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏")
        bot.register_next_step_handler(message, menu_vikladacham_add_grate_modul, db_filename, subject, table)
    elif text ==  'üîô–ù–∞–∑–∞–¥':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ú–æ–¥—É–ª—å 1')
        item2 = types.KeyboardButton('–ú–æ–¥—É–ª—å 2')
        item3 = types.KeyboardButton('–Ü–ù–î–ó')
        item5 = types.KeyboardButton(f'–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ–¥—Ä–∞–∑—É {key}')
        item4 = types.KeyboardButton('–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏')
        close_sub = types.KeyboardButton('–ó–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç')
        back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
        markup.add(back)
        markup.add(item1, item2)
        markup.add(item5)
        markup.add(item3)
        markup.add(item4)
        markup.add(close_sub)
        bot.send_message(message.chat.id,f"–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –≤ –ø—Ä–µ–¥–º–µ—Ç—ñ {subject}, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –¥–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É –∞–±–æ –∑–∞–∫—Ä–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç(–§—É–Ω–∫—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–±–∏—Ä–∞—î –∑–º–æ–≥—É –≤ —Å—Ç–∞—Ä–æ—Å—Ç —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∂—É—Ä–Ω–∞–ª —ó–º –±—É–¥–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥)",reply_markup=markup)
        bot.register_next_step_handler(message, menu_vikladacham_5, db_filename, subject, key)

    elif text == "–î–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É":
        subject = subject.replace(" ","_")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ {subject}_{table}
        table_name = f'{subject}_{table}'
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        column_names = [column[1] for column in columns if column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–ù']
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑—ñ —Å–ø–∏—Å–∫—É column_names
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        for column_name in column_names:
            markup.add(column_name)
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –≤ —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –æ—Ü—ñ–Ω–∫–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, menu_vikladacham_add_grate_1_modul, db_filename, subject, table,column_names)

    elif text == '–ü–µ—Ä–µ–≥–ª—è–¥ –æ—Ü—ñ–Ω–æ–∫':

        subject = subject.replace(" ", "_")
        table_name = f'{subject}_{table}'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('1')
        item2 = types.KeyboardButton('2')
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id,"–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é:\n1 - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ –æ–∫—Ä–µ–º–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞\n2 - –ø–µ—Ä–µ–≥–ª—è–¥ –æ—Ü—ñ–Ω–æ–∫ –≤—Å—ñ—î—ó –≥—Ä—É–ø–∏ —ñ–∑ –æ–∫—Ä–µ–º–æ—ó —Ç–µ–º–∏", reply_markup=markup)
        bot.register_next_step_handler(message,menu_vikladacham_look_grate_1,db_filename, table_name, subject)

    elif text == '–†–µ–¥. –Ω–∞–∑–≤—É —Ç–µ–º—É':
        subject = subject.replace(" ","_")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ {subject}_{table}
        table_name = f'{subject}_{table}'

        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        column_names = [column[1] for column in columns if
                        column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–º–æ–¥—É–ª—å_1' and column[1] != '–º–æ–¥—É–ª—å_2' and column[
                            1] != '–ù']

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑—ñ —Å–ø–∏—Å–∫—É column_names
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for column_name in column_names:
            markup.add(column_name)
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        user_grypa = db_filename.split(".")
        user_grypa = user_grypa[0]
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:", reply_markup=markup)
        bot.register_next_step_handler(message, jurnal1_tema_1, db_filename, user_grypa, subject, table, column_names)

        conn.close()


    elif text == '–î–æ–¥–∞—Ç–∏ —Ç–µ–º—É':
        subject = subject.replace(" ", "_")
        bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó —Ç–µ–º–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy, db_filename, subject, table)



    elif text == '–ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥—É–ª—å':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_{table} FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = '{subject}'")
        close = cursor.fetchone()
        result_variable = close[0]

        if result_variable == f'–ó–∞–∫—Ä–∏—Ç–∏–π –º–æ–¥—É–ª—å {table}':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–¢–∞–∫')
            item2 = types.KeyboardButton('–ù—ñ')
            markup.add(item1, item2)
            bot.send_message(message.chat.id,f"–ú–æ–¥—É–ª—å {table} –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∏–π –º–æ–∂–ª–∏–≤–æ –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –π–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏?)))",reply_markup=markup)
            bot.register_next_step_handler(message, open_module, db_filename, subject, table)
        else:
            close_module_1(message, db_filename, subject,table)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, menu_vikladacham_add_grate_modul, db_filename, subject, table, key)



def open_module(message, db_filename, subject,table):
    text = message.text
    if text == '–¢–∞–∫':
        subject = subject.replace("_", " ")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()


        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_{table} = NULL WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?', (subject,))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–ú–æ–¥—É–ª—å {table} –≤—ñ–¥–∫—Ä–∏—Ç–∏–π –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç")
        menu_vikladacham(message)
    elif text == '–ù—ñ':
        menu_vikladacham(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, open_subject, db_filename, subject)
def close_module_1(message, db_filename, subject,table):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–¢–∞–∫ü•∂')
    item2 = types.KeyboardButton('–ù—ñü•µ')
    markup.add(item1, item2)
    bot.send_message(message.chat.id,
                     f"–í–∏ –æ–±—Ä–∞–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–∫—Ä–∏—Ç—Ç—è –ú–æ–¥—É–ª—è {table} –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É {subject}. –ß–∏ –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–∑–±–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä–æ—Å—Ç —Å—Ç–∞—Ç—É—Å—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è? –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∏–∂—á–µ.",
                     reply_markup=markup)
    bot.register_next_step_handler(message, close_module, db_filename, subject, table)
def close_module(message,db_filename, subject, table):
    text = message.text
    if text == '–¢–∞–∫ü•∂':
        subject = subject.replace("_", " ")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        a = f'–ó–∞–∫—Ä–∏—Ç–∏–π –º–æ–¥—É–ª—å {table}'
        cursor.execute(f'UPDATE –ü—Ä–µ–¥–º–µ—Ç–∏ SET –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_{table} = ? WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = ?', (a, subject))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–≤–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –ú–æ–¥—É–ª—å {table} —ñ–∑ –ø—Ä–µ–¥–º–µ—Ç—É {subject}")
        menu_vikladacham(message)
    elif text == '–ù—ñü•µ':
        menu_vikladacham(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message,close_module, db_filename, subject, table)

def menu_vikladacham_look_grate_1(message,db_filename, table_name, subject):

    text = message.text
    if text == "2":
        menu_vikladacham_look_grate_2_1(message, db_filename, table_name, subject)
    elif text == '1':
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü—ñ—è —Å–∫–æ—Ä–æ –±—É–¥–µ")
def menu_vikladacham_look_grate_2_1(message, db_filename, table_name, subject):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns if column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–ù']

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
    for column_name in column_names:
        markup.add(column_name)

    bot.send_message(message.chat.id,"–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É, –∑ —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —Å–≤–æ—ó—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∞–±–æ –∑—Ä–∞–∑—É –∑ —Ü—ñ–ª–æ–≥–æ –º–æ–¥—É–ª—è:",reply_markup=markup)
    bot.register_next_step_handler(message, menu_vikladacham_look_grate_2_2, db_filename, table_name,column_names, subject)
def menu_vikladacham_look_grate_2_2(message, db_filename, table_name,column_names, subject):
    text = message.text
    if text == 'üîô–ù–∞–∑–∞–¥':
        menu_vikladacham(message)
    elif text not in column_names:
        bot.send_message(message.chat.id, "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –Ω–µ –≤—ñ—Ä–Ω—É —Ç–µ–º—É –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, menu_vikladacham_look_grate_2_2, db_filename,table_name,column_names,subject)
    else:

        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        students_list = "\n".join([student[0] + ' - ' for student in students])

        cursor.execute(f"SELECT [{text}] FROM {table_name} ")
        ocinky = cursor.fetchall()
        ocinky = ocinky[2:]
        ocinky = [item for tpl in ocinky for item in tpl]
        ocinky2 = []
        for i in ocinky:
            if i == None:
                ocinky2.append("0")
            else:
                ocinky2.append(i)

        results = []
        students_list1 = students_list.split("\n")
        for k, i in enumerate(students_list1):
            results.append(i + ocinky2[k])

        gem = "\n".join([row for row in results])
        subject = subject.replace("_", " ")
        bot.send_message(message.chat.id, f"–û—Å—å –æ—Ü—ñ–Ω–∫–∏ —ñ–∑ —Ç–µ–º–∏ {text} —ñ–∑ –ø—Ä–µ–¥–º–µ—Ç—É {subject}:\n{gem}")
        bot.register_next_step_handler(message, menu_vikladacham_look_grate_2_2, db_filename, table_name, column_names,subject)
def menu_vikladacham_add_grate_1_modul(message, db_filename,subject, table,column_names):
    tema = message.text
    if tema == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    elif tema in column_names:
        bot.send_message(message.chat.id,
                         "–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≥—Ä—É–ø–∏ —ó—Ö–Ω—î –ø–æ–≤–Ω–µ —ñ–º\'—è.\n–ó–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n–¢–∞–∫–æ–∂ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º –≥—Ä—É–ø–∏, –¥–ª—è –∑—Ä—É—á–Ω—ñ—à–æ–≥–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫")
        bot.send_message(message.chat.id,
                         "–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –æ—Ü—ñ–Ω–∫–∞")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()

        # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–≤–ø—Ü—è "–°—Ç—É–¥–µ–Ω—Ç–∏" —Ç–∞–±–ª–∏—Ü—ñ "STUDENTY"
        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        students_list = "\n".join([student[0] + ' - ' for student in students])

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –±–æ—Ç–∞
        bot.send_message(message.chat.id, f"<code>{students_list}</code>", parse_mode=ParseMode.HTML, reply_markup=telebot.types.ReplyKeyboardRemove())
        conn.close()
        bot.register_next_step_handler(message, menu_vickladacham_add_grate_2, db_filename, subject, table, tema)
    else:
        bot.send_message(message.chat.id,"–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        bot.register_next_step_handler(message, menu_vikladacham_add_grate_1_modul, db_filename, subject, table,column_names)
def menu_vickladacham_add_grate_2(message, db_filename, subject, table, tema):
    text = message.text
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    rows = text.split("\n")
    table_name = f'{subject}_{table}'
    split = []
    splitnot = []
    for row in rows:
        student_data = row.split(" - ")
        if len(student_data) == 2:
            split.append(row)

        else:
            splitnot.append(row)

    if len(splitnot) == 0:
        for row in split:
            student_data = row.split(" - ")
            name, grade = student_data
            cursor.execute(
                f"UPDATE {table_name} SET [{tema}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",
                (grade, name))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        jurnal1_5_dodavanna_ocinok(message, db_filename, table_name, subject)

    elif len(splitnot) > 0:
        list = tuple(splitnot)
        message_text = "\n\n".join(list)
        bot.send_message(message.chat.id,f"{message_text} –û—Å—å —Ü—ñ —Ä—è–¥–∫–∏ —è –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, menu_vickladacham_add_grate_2, db_filename, subject, table, tema)
@bot.message_handler(commands=['menu'])
def message_handler_start(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
    user_rol = cursor.fetchone()
    if user_rol:
        user_rol = user_rol[0]
        if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
            item2 = types.KeyboardButton('‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä')
            item3 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤')
            jurnal = types.KeyboardButton('–ñ—É—Ä–Ω–∞–ª')
            item4 = types.KeyboardButton('–°—Ç–∞—Ä–æ—Å—Ç–∞–º')
            item5 = types.KeyboardButton('–î–æ–º–∞—à–∫–∞')
            item_menu = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤')
            item5_6 = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
            markup.add(item1, item2, item3,jurnal, item4, item5)
            markup.add(item_menu)
            markup.add(item5_6)
            bot.send_message(message.chat.id, "üëá".format(message.from_user), reply_markup=markup)
        elif user_rol == '–≤–∏–∫–ª–∞–¥–∞—á':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
            item2 = types.KeyboardButton('‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä')
            item3 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤')
            item4 = types.KeyboardButton('–í–∏–∫–ª–∞–¥–∞—á–∞–º')
            item_menu = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤')
            item5_6 = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
            markup.add(item1, item2, item3, item4)
            markup.add(item_menu)
            markup.add(item5_6)
            bot.send_message(message.chat.id, "üëá".format(message.from_user), reply_markup=markup)
        elif user_rol == '—Å—Ç—É–¥–µ–Ω—Ç':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
            item2 = types.KeyboardButton('‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä')
            item3 = types.KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤')
            jurnal = types.KeyboardButton('–ñ—É—Ä–Ω–∞–ª')
            item5 = types.KeyboardButton('–î–æ–º–∞—à–∫–∞')
            item_menu = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤')
            item5_6 = types.KeyboardButton('–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É')
            markup.add(item1, item2, item3,jurnal, item5)
            markup.add(item_menu)
            markup.add(item5_6)
            bot.send_message(message.chat.id, "üëá".format(message.from_user), reply_markup=markup)
def support_project(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    info = types.KeyboardButton('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É')
    info2 = types.KeyboardButton('–î–æ–Ω–∞—Ç–∏–∫')
    info3 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫')
    back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(info)
    markup.add(info2)
    markup.add(info3)
    markup.add(back)
    bot.send_message(message.chat.id, "–ë—É–¥–µ–º–æ —Ä–∞–¥—ñ, —è–∫—â–æ –≤–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—î—Ç–µ –ø—Ä–æ–µ–∫—Ç —á–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª—å–Ω–æ —á–∏ —Ç–µ–ø–ª–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)ü•π", reply_markup=markup)
    bot.register_next_step_handler(message,support_project2)
def support_project2(message):
    text = message.text
    if text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É':
        bot.send_message(message.chat.id,"–ü—Ä–∏–≤—ñ—Ç, –º–∏ –∑–±–∏—Ä–∞—î–º–æ —Å—É–º—É –¥–ª—è –æ—Ä–µ–Ω–¥–∏ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞ —è–∫–æ–º—É –±—É–¥–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞—à –±–æ—Ç, –ø–∞–º º—è—Ç–∞–π—Ç–µ –¥–æ–Ω–∞—Ç –Ω–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º, –∞–ª–µ —Ü–µ —Å–∏–ª—å–Ω–æ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–ª–µ–≥—à–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—à—É –ø—Ä–∞—Ü—é, –¥—è–∫—É—î–º–æ –≤—Å—ñ–º, –Ω—É —ñ –∑–≤—ñ—Å–Ω–æ –Ω–∞–≥–∞–¥—É—î–º–æ —â–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–æ–Ω–∞—Ç—ñ–≤ –Ω–µ –±—É–≤–∞—î)")
        bot.register_next_step_handler(message, support_project2)
    elif message.text == 'üîô–ù–∞–∑–∞–¥':
        support_project(message)
    elif text == '–î–æ–Ω–∞—Ç–∏–∫':
        bot.send_message(message.chat.id,"–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É\nhttps://send.monobank.ua/jar/9qjTL2dtrB\n–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –±–∞–Ω–∫–∏\n5375 4112 0659 5113")
        bot.register_next_step_handler(message, support_project2)
    elif text == '–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫':
        bot.send_message(message.chat.id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–≤—ñ–π –≤—ñ–¥–≥—É–∫ –ø—Ä–æ –º–µ–Ω–µ', reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, response)
    else:
        bot.send_message(message.chat.id, '–ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É')
        bot.register_next_step_handler(message, support_project2)
def response(message):
    text = message.text
    id = message.chat.id
    conn = sqlite3.connect(f"users.db")
    cursor = conn.cursor()
    cursor.execute('INSERT INTO "–í—ñ–¥–≥—É–∫–∏" (id, text) VALUES (?, ?)', (id, text))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, '–î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫)')
    message_handler_start(message)
@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':

        if message.text == '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤':
            bot.send_message(message.chat.id, '–ó–∞—Å–Ω–æ–≤–Ω–∏–∫ @yura_krykh\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /support —è–∫—à–æ –≤–∏–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º–∏')

        elif message.text == '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç—É':
            support_project(message)

        elif message.text == '–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–∫—É':
            bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
            bot.register_next_step_handler(message,bot_message)

        elif message.text == '–°—Ç–∞—Ä–æ—Å—Ç–∞–º':
            user_id = message.from_user.id
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
            user_rol = cursor.fetchone()
            if user_rol:
                user_rol = user_rol[0]
                if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
                    menu_starostam(message)
                else:
                    bot.send_message(message.chat.id, "–í–∏ –Ω–µ —î —Å—Ç–∞—Ä–æ—Å—Ç–æ—é, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü–∏–º –º–µ–Ω—é)")
                    message_handler_start(message)
            else:
                bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                message_handler_start(message)

        elif message.text == '–í–∏–∫–ª–∞–¥–∞—á–∞–º':
            chet_teacer(message)

        elif message.text == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥':
            user_id = message.from_user.id
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
            user_rol = cursor.fetchone()
            if user_rol:
                user_rol = user_rol[0]
                if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton('–ü–æ–Ω–µ–¥—ñ–ª–æ–∫')
                    item2 = types.KeyboardButton('–í—ñ–≤—Ç–æ—Ä–æ–∫')
                    item3 =types.KeyboardButton('–°–µ—Ä–µ–¥–∞')
                    item4 = types.KeyboardButton('–ß–µ—Ç–≤–µ—Ä')
                    item5 = types.KeyboardButton('–ü\'—è—Ç–Ω–∏—Ü—è')
                    back =types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
                    keyboard.add(back)
                    keyboard.add(item1, item2, item3, item4, item5)

                    bot.send_message(message.chat.id,"–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å, —É —è–∫–∏–π –≤–∏ –≤–Ω–µ—Å–µ—Ç–µ –∫–æ—Ä–µ–∫—Ü—ñ—é", reply_markup=keyboard)
                    bot.register_next_step_handler(message, redaguvanna,user_id)
                else:
                    bot.send_message(message.chat.id, "–í–∏ –Ω–µ —î —Å—Ç–∞—Ä–æ—Å—Ç–æ—é, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü–∏–º –º–µ–Ω—é)")
                    message_handler_start(message)

        elif message.text == '–î–æ–º–∞—à–∫–∞':
            bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
            bot.register_next_step_handler(message, bot_message)

        elif message.text == '‚úçÔ∏è–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä':
            user_id = message.chat.id
            rozklad_par_0(message, user_id)

        elif message.text == 'üìú–ü—Ä–æ—Ñ—ñ–ª—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            update_profile = types.KeyboardButton('üîß–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(update_profile, back)
            user_id = message.chat.id
            user_data = get_user_data(user_id)
            if user_data is not None:
                grypa, email, first_last = user_data
                profile_info = f"üìú–ü—Ä–æ—Ñ—ñ–ª—å\nüìö–ì—Ä—É–ø–∞: {grypa}\n‚úâÔ∏èEmail: {email}\nüë®‚Äçüéì–ü–Ü–ë: {first_last}"
                bot.send_message(message.chat.id, profile_info, reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ(\n–ó–≤–µ—Ä–Ω–∏—Å—å –¥–æ /support!")

        elif message.text == 'üîß–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            up_email = types.KeyboardButton('üõ†üì®Email')
            up_grypa = types.KeyboardButton('üõ†üë•–ì—Ä—É–ø—É')
            up_firstlast = types.KeyboardButton("üõ†ü™™–ü–Ü–ë")
            back = types.KeyboardButton('üìú–ü—Ä–æ—Ñ—ñ–ª—å')
            markup.add(up_email, up_grypa, up_firstlast, back)
            bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?üßê", reply_markup=markup)

        elif message.text == 'üõ†üì®Email':

            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ñ—ñ–∑–º–∞—Ç—ñ–≤—Å—å–∫—É –ø–æ—à—Ç—É:")
            bot.register_next_step_handler(message, update_email)

        elif message.text == 'üõ†üë•–ì—Ä—É–ø—É':
            keyboard2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–°–û–§–Ü-11')
            item2 = types.KeyboardButton('–°–û–§–ê-12')
            item3 = types.KeyboardButton('–°–û–ú–Ü-13')
            item4 = types.KeyboardButton('–ö–ú-14')
            item5 = types.KeyboardButton('–°–û–Ü–ú-15')
            item6 = types.KeyboardButton('–Ü–Ü–ü-16')
            item7 = types.KeyboardButton('DA-17')
            item8 = types.KeyboardButton('–°–û–§–Ü-21')
            item9 = types.KeyboardButton('–°–û–ú–Ü-22')
            item10 = types.KeyboardButton('–°–û–Ü–ú-23')
            item11 = types.KeyboardButton('–°–û–§–ê-25')
            item12 = types.KeyboardButton('–ö–ù-26')
            item13 = types.KeyboardButton('–ö–ù-27')
            item14 = types.KeyboardButton('–°–û–§–Ü-31')
            item15 = types.KeyboardButton('–°–û–ú–Ü-32')
            item16 = types.KeyboardButton('–°–û–Ü–ú-33')
            item17 = types.KeyboardButton('–°–û–§–ê-35')
            item18 = types.KeyboardButton('–ö–ù-36')
            item19 = types.KeyboardButton('–°–û–§–Ü-41')
            item20 = types.KeyboardButton('–°–û–ú–Ü-42')
            item21 = types.KeyboardButton('–°–ûIM-43')
            item22 = types.KeyboardButton('–°–û–Ü–Ω—Å–∫-24')
            item23 = types.KeyboardButton('–º–°–û–§-11')
            item24 = types.KeyboardButton('–º–°–û–ú-12')
            item25 = types.KeyboardButton('–º–°–û–Ü–Ω-13')
            item26 = types.KeyboardButton('–º–°–û–§-21')
            item27 = types.KeyboardButton('–º–°–û–ú-22')
            item28 = types.KeyboardButton('–º–°–û–Ü–Ω-23')
            keyboard2.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13,
                          item14, item15, item16, item17, item18, item19, item20, item21, item22, item23, item24,
                          item25, item26, item27, item28)

            bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É–ø—É:", reply_markup=keyboard2)
            bot.register_next_step_handler(message, update_grypa)

        elif message.text == "üõ†ü™™–ü–Ü–ë":
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ü–Ü–ë:")
            bot.register_next_step_handler(message, update_first_last)

        elif message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤':
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()

            cursor.execute("SELECT –í–∏–∫–ª–∞–¥–∞—á FROM Teachers")
            teachers = cursor.fetchall()


            keyboard = []
            for i in range(0, len(teachers), 3):
                row = []
                for j in range(i, min(i + 3, len(teachers))):
                    teacher_name = teachers[j][0]
                    row.append(InlineKeyboardButton(teacher_name, callback_data=teacher_name))
                keyboard.append(row)


            reply_markup = InlineKeyboardMarkup(keyboard)
            reply_markup = json.dumps(reply_markup.to_dict())

            conn.close()
            bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑–∞ –ø—Ä—ñ–∑–≤–∏—â–µ–º —è–∫–æ–≥–æ —à—É–∫–∞—î—Ç–µ:",reply_markup=reply_markup)

        elif message.text == "–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–æ–º":
            user_id = message.from_user.id
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
            user_rol = cursor.fetchone()
            if user_rol:
                user_rol = user_rol[0]
                if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
                    jurnal1(message)
                else:
                    bot.send_message(message.chat.id, "–í–∏ –Ω–µ —î —Å—Ç–∞—Ä–æ—Å—Ç–æ—é, –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è —Ü–∏–º –º–µ–Ω—é)")
                    message_handler_start(message)
            else:
                bot.send_message(message.chat.id, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                message_handler_start(message)

        elif message.text == 'üîô–ù–∞–∑–∞–¥':
            message_handler_start(message)
        elif message.text == '–ñ—É—Ä–Ω–∞–ª':
            user_id = message.chat.id
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()
            cursor.execute(f"SELECT grypa, first_last FROM login_id WHERE id = {user_id}")
            row = cursor.fetchone()
            if row is not None:
                user_grypa = row[0]
                first_last = row[1]
            else:
                # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
                user_grypa = None
                first_last = None
            user_grypa = user_grypa.upper().replace('_', '-')

            db_filename = user_grypa + '.db'
            if os.path.exists(db_filename):  # 1_1234
                bot.send_message(message.chat.id, f"–Ø –∑–Ω–∞–π—à–æ–≤ —Ç–≤—ñ–π –∂—É—Ä–Ω–∞–ª üôÇ")
                pereglad_ocinok(message, db_filename,first_last )


            else:  # 2_1234
                bot.send_message(message.chat.id,f"–°—Ö–æ–∂–µ –≤–∞—à–∞ —Å—Ç–∞—Ä–æ—Å—Ç–∞ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∞ –∂—É—Ä–Ω–∞–ª –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ {user_grypa}ü´†\n–í–∏ –º–æ–∂–µ—Ç–µ —ó—ó –≤—ñ—á–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏",)

        elif message.text == '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏':
            ogoloshennya_grypa(message)

        else:
            text = message.text
            bot_message1(message,text)
@bot.message_handler(content_types=['text'])
def bot_message1(message,text):
    if text == '—è —Å—Ç–∞—Ä–æ—Å—Ç–∞' or text == "–Ø —Å—Ç–∞—Ä–æ—Å—Ç–∞":
        bot.send_message(message.chat.id, "–¢–∏ –ø—ñ–∑–¥—é–∫, –∞ –Ω–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞üòè")
        bot.forward_message(chat_id=CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id)

    elif "–ø—É—Ç—ñ–Ω" in text.lower():
        bot.send_message(message.chat.id, "–•—É–π–ª–æü§ù")
        bot.forward_message(chat_id=CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id)


    elif "–ø—É—Ç—ñ–Ω—Ö—É–π–ª–æ" in text or "–ø—É—Ç—ñ–Ω —Ö—É–π–ª–æ" in text:
        bot.send_message(message.chat.id, "–ó–≥—ñ–¥–Ω–∏–πü§ù")
        bot.forward_message(chat_id=CHAT_ID, from_chat_id=message.chat.id, message_id=message.message_id)

    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ü–æ–ø—Ä–æ–±—É—î–º–æ')
        item2 = types.KeyboardButton('–Ü–Ω—à–∏–º —Ä–∞–∑–æ–º')
        markup.add(item1, item2)
        bot.send_message(message.chat.id,
                         f"–ú–æ–∂–ª–∏–≤–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º–æ?",
                         reply_markup=markup)
        bot.register_next_step_handler(message, chat_gpt)

def chat_gpt(message):
    text = message.text
    if text == '–ü–æ–ø—Ä–æ–±—É—î–º–æ':
        bot.send_message(message.chat.id,f"–ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –ª—é–±–µ –ø–æ–≤—ñ–¥–æ–ª–º–µ–Ω–Ω—è —â–æ —Ç–∏ —Ö–æ—á–µ—à –∑–Ω–∞—Ç–∏")
        bot.register_next_step_handler(message, handle_text)
    elif text == '–Ü–Ω—à–∏–º —Ä–∞–∑–æ–º':
        bot.send_message(message.chat.id,f"–ù—É –¥–æ–±—Ä–µ(",)

contexts = {}
def handle_text(message):
    chat_id = message.chat.id
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥':
        message_handler_start(message)
    elif message.text.startswith('/'):
        message_handler_start(message)
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if chat_id in contexts:
        context = contexts[chat_id]
    else:
        context = ""

    # –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    input_text = f"{context}{message.text}"
    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=input_text,
        max_tokens=1024,
        n=1,
        stop=None,
        temperature=0.5,
    )
    # –û—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    output_text = response.choices[0].text

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    contexts[chat_id] = f"{input_text}{output_text}"

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥')
    markup.add(item1)
    bot.send_message(chat_id, output_text,reply_markup=markup)
    bot.register_next_step_handler(message, handle_text)






def chet_teacer(message):
    user_id = message.chat.id
    user_id = str(user_id)
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT id FROM –í–∏–∫–ª–∞–¥–∞—á—ñ")
    results = cursor.fetchall()
    results = [item for tpl in results for item in tpl]

    if user_id not in results:
        cursor.execute(f"SELECT email, grypa FROM login_id WHERE id = {user_id}")
        data = cursor.fetchall()

        bot.send_message(message.chat.id, '–ô–æ–π –∑–¥–∞—î—Ç—å—Å—è —è –≤–∞—Å –Ω–µ –Ω–∞–π—à–æ–≤')
        bot.send_message(message.chat.id, '–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏(–ø–æ–≤–Ω—É –Ω–∞–∑–≤—É –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏) —ñ —á–µ—Ä–µ–∑ –¥–µ—Ñ—ñ—Å –ì—Ä—É–ø—É –≤ —è–∫—ñ–π –≤–∏–∫–ª–∞–¥–∞—î—Ç–µ –π–æ–≥–æ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º ‚ÄºÔ∏è‚ÄºÔ∏è\n\n(–ü—Ä–µ–¥–º–µ—Ç) - –ì—Ä—É–ø–∞\n(–ü—Ä–µ–¥–º–µ—Ç) - –ì—Ä—É–ø–∞\n(–ü—Ä–µ–¥–º–µ—Ç) - –ì—Ä—É–ø–∞\n(–ü—Ä–µ–¥–º–µ—Ç) - –ì—Ä—É–ø–∞')
        creat_teacer(message,user_id,data)
        conn.close()
    else:
        conn.close()
        menu_vikladacham(message)
def creat_teacer(message,user_id,data):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f'CREATE TABLE IF NOT EXISTS "{user_id}_tea" (–ø—Ä–µ–¥–º–µ—Ç TEXT, –≥—Ä—É–ø–∞ TEXT)')
    for row in data:
        email, kaf = row
        cursor.execute('INSERT INTO "–í–∏–∫–ª–∞–¥–∞—á—ñ" (id, email, –ö–∞—Ñ–µ–¥—Ä–∞) VALUES (?,?,?);',(user_id, email,kaf))
    conn.commit()
    conn.close()
    bot.register_next_step_handler(message, teacher_pred,user_id)
def teacher_pred(message,user_id):
    pred = message.text
    lines = pred.split('\n')
    lines = [i.split(" - ") for i in lines]

    list = []
    for i in lines:
        if len(i) != 2:
            list.append(i)
            lines.remove(i)

    message_text = "\n\n".join(str(el) for el in list)
    message_text2 = "\n".join([f'{item[0]} - {item[1]}' for item in lines])
    if len(list) > 0:
        if len(lines) > 0:
            bot.send_message(message.chat.id,f"{message_text}\n —Ç—É—Ç –≤–∏–≤–µ–¥–µ–Ω—ñ —Ä—è–¥–æ–∫, —è–∫—ñ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n{message_text2}\n–ê –æ—Å—å —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ñ\n–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ —ñ –≥—Ä—É–ø–∏ –∑–∞ –∑—Ä–∞–∑–∫–æ–º")
            bot.register_next_step_handler(message, teacher_pred, user_id)
        elif len(lines) == 0:
            bot.send_message(message.chat.id,f"{message_text}\n —Ç—É—Ç –≤–∏–≤–µ–¥–µ–Ω—ñ —Ä—è–¥–æ–∫, —è–∫—ñ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ —ñ –≥—Ä—É–ø–∏ –∑–∞ –∑—Ä–∞–∑–∫–æ–º")
            bot.register_next_step_handler(message, teacher_pred, user_id)
    else:
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏–§—ñ–∑–º–∞—Ç—É FROM –ü—Ä–µ–¥–º–µ—Ç–∏–§—ñ–∑–º–∞—Ç—É")
        result = cursor.fetchall()
        result = [item.lower() for tpl in result for item in tpl]
        gryp = ['–°–û–ú–Ü-32', '–°–û–Ü–ú-33', '–°–û–§–ê-35', '–ö–ù-36', '–º–°–û–§-11', '–º–°–û–ú-12', '–°–û–§–Ü-41', '–°–û–ú–Ü-42', '–°–ûIM-43',
                '–°–û–Ü–Ω—Å–∫-24', '–º–°–û–Ü–Ω-13', '–ö–ú-14', '–°–û–Ü–ú-15', '–Ü–Ü–ü-16', 'DA-17', '–°–û–§–Ü-21', '–°–û–§–Ü-21', '–°–û–ú–Ü-22',
                '–ö–ù-26', '–ö–ù-27', '–°–û–§–Ü-31', '–°–û–Ü–ú-23', '–°–û–§–ê-25', '–°–û–§–Ü-11', '–°–û–§–ê-12', '–°–û–ú–Ü-13', '–º–°–û–§-21',
                '–º–°–û–ú-22', '–º–°–û–Ü–Ω-23']

        fakepred = ''
        lines_list = []
        gryp = [i.upper() for i in gryp]

        for i in lines:
            subject, grypa = i
            if subject.lower() not in result or grypa.upper() not in gryp:
                fakepred += subject +' - ' + grypa + '\n'
            else:
                lines_list.append(i)
        if len(fakepred)>0:
            bot.send_message(message.chat.id, f'{fakepred} –æ—Å—å —Ü—ñ —Ä—è–¥–∫–∏ –≤–≤–µ–¥–µ–Ω–µ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç –∞–±–æ –Ω–µ –≤—ñ—Ä–Ω–∞ –Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏\n–í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –ø—Ä–µ–¥–º–µ—Ç —ñ –≥—Ä—É–ø—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º')
            bot.register_next_step_handler(message, teacher_pred, user_id)
        else:
            teacher_pred2(message, user_id, lines_list)
def teacher_pred2(message, user_id, lines_list):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    for i in lines_list:
        subject, grypa = i
        subject = subject.lower()
        grypa = grypa.upper()
        esc = ' _<>,.?!@#$%^&*()+=`"\''
        for char in esc:
            grypa = grypa.replace(char, '-')
        cursor.execute(f'INSERT INTO "{user_id}_tea" (–ø—Ä–µ–¥–º–µ—Ç, –≥—Ä—É–ø–∞) VALUES (?,?);', (subject, grypa,))
    conn.commit()
    conn.close()
    menu_vikladacham(message)
def ogoloshennya_grypa(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(item_back)
    bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ —Å–≤–æ—ó–π –≥—Ä—É–ø—ñ:',reply_markup= markup)
    bot.register_next_step_handler(message, ogoloshennya_grypa2)
def ogoloshennya_grypa2(message):
    news = message.text
    if news == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    else:
        user_id = message.chat.id
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT grypa FROM login_id WHERE id = {user_id}")
        user_grypa = cursor.fetchone()[0]
        cursor.execute(f"SELECT id FROM login_id WHERE grypa = '{user_grypa}'")
        all = cursor.fetchall()
        all = [item for tpl in all for item in tpl]
        blocked_users = []

        if message.content_type == 'text':
            for user in all:
                try:
                    bot.forward_message(chat_id=user, from_chat_id=message.chat.id, message_id=message.message_id)
                except telebot.apihelper.ApiTelegramException as e:
                    if e.result.status_code == 403:
                        blocked_users.append(user)
            message_handler_start(message)
        else:
            for user in all:
                try:
                    bot.forward_message(chat_id=user, from_chat_id=message.chat.id, message_id=message.message_id)
                except telebot.apihelper.ApiTelegramException as e:
                    if e.result.status_code == 403:
                        blocked_users.append(user)
            message_handler_start(message)


        if blocked_users:
            blocked = []
            for i in blocked_users:
                cursor.execute(f"SELECT email, first_last FROM login_id WHERE id = {i}")
                result = cursor.fetchone()
                blocked.append(result)
            blocked_users_text = ''
            for i in blocked:
                text = ': '.join(i)
                blocked_users_text += text + "\n"
            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞
            bot.send_message(message.chat.id, f"–¢–≤–æ—ó –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∏, —è–∫—ñ –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞ —ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n{blocked_users_text}")
            message_handler_start(message)
def pereglad_ocinok(message, db_filename,first_last):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute('SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏')
    result = cursor.fetchall()

    keyboard = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for row in result:
        subject = row[0]
        keyboard.append(subject)
        markup.add(types.KeyboardButton(subject))

    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∑ —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –æ—Ü—ñ–Ω–∫–∏", reply_markup=markup)
    bot.register_next_step_handler(message,pereglad_ocinok_2,db_filename,first_last, keyboard)
def pereglad_ocinok_2(message, db_filename,first_last, keyboard):
    subject = message.text
    if subject == "üîô–ù–∞–∑–∞–¥":
        message_handler_start(message)

    elif subject in keyboard:
        subject = subject.replace(" ", "_")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        table_name = f'{subject}_–°—Ç—É–¥–µ–Ω—Ç–∏'
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        column_names = [column[1] for column in columns if
                        column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–º–æ–¥—É–ª—å_1' and column[1] != '–º–æ–¥—É–ª—å_2' and column[
                            1] != '–ù' and column[1] != '–Ü–Ω–¥–∑' and column[1] != '–ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤']

        query = f"SELECT –º–æ–¥—É–ª—å_1, –º–æ–¥—É–ª—å_2, –Ü–Ω–¥–∑, {column_names[0]}, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ FROM {subject}_–°—Ç—É–¥–µ–Ω—Ç–∏ WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?"
        cursor.execute(query, (first_last,))
        row = cursor.fetchone()

        if row is not None:
            module_1 = row[0] if row[0] is not None else '0'
            module_2 = row[1] if row[1] is not None else '0'
            indz = row[2] if row[2] is not None else '0'
            exam = row[3] if row[3] is not None else '0'
            total_score = row[4] if row[4] is not None else '0'

            result_string = (
                f"–ú–æ–¥—É–ª—å 1: {module_1}\n"
                f"–ú–æ–¥—É–ª—å 2: {module_2}\n"
                f"–Ü–ù–î–ó(—è–∫—â–æ —Ü—å–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä—É —î): {indz}\n"
                f"{column_names[0]}: {exam}\n"
                f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤: {total_score}"
            )
            bot.send_message(message.chat.id,result_string)
            bot.register_next_step_handler(message, pereglad_ocinok_2, db_filename, first_last, keyboard)
        else:
            bot.send_message(message.chat.id, "–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –º–æ–∂–ª–∏–≤–æ –≤–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –ø—ñ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ü–Ü–ë")
            message_handler_start(message)



    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, pereglad_ocinok_2, db_filename, first_last, keyboard)
#def homework(message):
#    user_id = message.chat.id
#    conn = sqlite3.connect('users.db')
#    cursor = conn.cursor()
#    cursor.execute(f"SELECT grypa FROM login_id WHERE id = {user_id}")
#    user_grypa = cursor.fetchone()[0]
#    user_grypa = user_grypa.upper().replace('_', '-')
#
#    db_filename = user_grypa + '_DOMASHKA.db'
#    if os.path.exists(db_filename):  # 1_1234
#        homework1(message, db_filename, user_grypa)
#       ## –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
#       #conn1 = sqlite3.connect(db_filename)
#       #cursor1 = conn1.cursor()
#
#       ## –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑—ñ —Å—Ç–æ–≤–ø—Ü—è "–ü—Ä–µ–¥–º–µ—Ç–∏"
#       #cursor1.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
#       #results = cursor1.fetchall()
#
#       ## –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
#       #keyboard = []
#       #for result in results:
#       #    subject = result[0]
#       #    button = [KeyboardButton(subject)]
#       #    keyboard.append(button)
#
#       ## –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥" –Ω–∞ –ø–æ—á–∞—Ç–∫—É
#       #back_button = [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
#       #keyboard.insert(0, back_button)
#
#       ## –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
#       #reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
#       #reply_markup = json.dumps(reply_markup.to_dict())
#
#       ## –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
#       #bot.send_message(message.chat.id,
#       #                 f"–û–±–µ—Ä—ñ—Ç—å –∑ —è–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É —Ö–æ—á–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –¥–æ—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å–≤–æ—î—ó –≥—Ä—É–ø–∏ {user_grypa}",
#       #                 reply_markup=reply_markup)
#
#       ## –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö SQLite
#        #conn1.close()
#
#
#    else:  # 2_1234
#        bot.send_message(message.chat.id, f"–¢–∞–±–ª–∏—Ü—ñ —ñ–∑ –¥–æ–º–∞—à–Ω—ñ–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –¥–ª—è —Ç–≤–æ—î—ó –≥—Ä—É–ø–∏ {user_grypa} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω–æ, –¥–∞–≤–∞–π —è —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–∂—É —ó—Ö —Å—Ç–≤–æ—Ä–∏—Ç–∏üßë‚Äçüíª", reply_markup=telebot.types.ReplyKeyboardRemove())
#        homework2_1(message,user_grypa)
#def homework1(message, db_filename, user_grypa):
#    conn = sqlite3.connect(db_filename)
#    cursor = conn.cursor()
#    cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
#    result = cursor.fetchall()
#
#    keyboard = []
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#    for row in result:
#        subject = row[0]
#        keyboard.append(subject)
#        markup.add(types.KeyboardButton(subject))
#
#    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
#
#    bot.send_message(message.chat.id, f"–û–±–µ—Ä—ñ—Ç—å –∑ —è–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É —Ö–æ—á–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –¥–æ—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å–≤–æ—î—ó –≥—Ä—É–ø–∏ {user_grypa}", reply_markup=markup)
#
#    conn.close()
#def homework2_1(message,user_grypa):
#    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏
#    conn = sqlite3.connect(f"{user_grypa}_DOMASHKA.db")
#    cursor = conn.cursor()
#    cursor.execute("CREATE TABLE IF NOT EXISTS –ü—Ä–µ–¥–º–µ—Ç–∏ (–ü—Ä–µ–¥–º–µ—Ç–∏ TEXT)")
#    conn.commit()
#    conn.close()
#
#    db_filename = user_grypa + '.db'
#    if os.path.exists(db_filename):
#        conn1 = sqlite3.connect(f"{user_grypa}.db")
#        cursor2 = conn1.cursor()
#        cursor2.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
#        results = cursor2.fetchall()
#        subjects = [row[0] for row in results]
#        sub = ", ".join(subjects)
#        conn1.close()
#        bot.send_message(message.chat.id,f"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ—Å—å —Ü—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —ñ–∑ –∂—É—Ä–Ω–∞–ª—É –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏\n\n<code>{sub}</code>\n\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º—É)))",parse_mode=ParseMode.HTML)
#        bot.register_next_step_handler(message, homework2_2, user_grypa)
#
#    else:
#        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –≤—Å—ñ —Å–≤–æ—ó –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n\n<code>–ê–ª–≥–µ–±—Ä–∞, –§—ñ–∑–∏–∫–∞, –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞, –Ü–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞, –§—ñ–∑—Ä–∞, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞</code>\n\n–¢–æ–±—Ç–æ —á–µ—Ä–µ–∑ –∫–æ–º—É))", parse_mode=ParseMode.HTML)
#        bot.register_next_step_handler(message, homework2_2, user_grypa)
#def homework2_2(message,user_grypa):
#    predmety = message.text
#    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#    item1 = types.KeyboardButton('–¢–∞–∫ –≤—Å–µ –≤—ñ—Ä–Ω–æ')
#    item2 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏')
#    markup.add(item1)
#    markup.add(item2)
#    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —É—Å—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏",reply_markup=markup)
#    bot.send_message(message.chat.id, f"<code>{predmety}</code>", parse_mode=ParseMode.HTML)
#    bot.register_next_step_handler(message,homework2_3,user_grypa,predmety)
#def homework2_3(message, user_grypa,predmety):
#    vidpovid = message.text
#
#    if vidpovid == '–¢–∞–∫ –≤—Å–µ –≤—ñ—Ä–Ω–æ':
#
#        bot.send_message(message.chat.id, "–ó–±–µ—Ä—ñ–≥–∞—é –≤–∞—à—ñ –ø—Ä–µ–¥–º–µ—Ç–∏...", reply_markup=telebot.types.ReplyKeyboardRemove())
#        time.sleep(2)
#        homework2_4(message,user_grypa,predmety)
#
#    elif vidpovid == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏':
#        bot.send_message(message.chat.id,"–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —â–µ —Ä–∞–∑ –≤–∞—à—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ)", reply_markup=telebot.types.ReplyKeyboardRemove())
#        bot.register_next_step_handler(message, homework2_2, user_grypa)
#def homework2_4(message, user_grypa,predmety):
#    subjects = predmety.split(', ')  # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –∑–∞ –∫–æ–º–∞–º–∏
#
#    conn = sqlite3.connect(f"{user_grypa}_DOMASHKA.db")
#    cursor = conn.cursor()
#
#    for subject in subjects:
#        cursor.execute("INSERT INTO –ü—Ä–µ–¥–º–µ—Ç–∏ (–ü—Ä–µ–¥–º–µ—Ç–∏) VALUES (?)", (subject,))
#
#    conn.commit()
#    bot.send_message(message.chat.id, "–°—Ç–≤–æ—Ä—é—é —Ç–∞–±–ª–∏—Ü—ñ –∑ –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏...")
#    time.sleep(2)
#    homework2_5(message, user_grypa)
#def homework2_5(message, user_grypa):
#    conn = sqlite3.connect(f"{user_grypa}_DOMASHKA.db")
#    cursor = conn.cursor()
#    cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
#    result = cursor.fetchall()
#    result = [(item[0].replace(" ", "_"),) for item in result]
#    for row in result:
#        pre = row[0]
#        cursor.execute(
#            f'CREATE TABLE "{pre}" ("id" TEXT, username TEXT)'
#        )
#        cursor.execute(
#            f'CREATE TABLE "{pre}_dz" ("–ó–∞–≤–¥–∞–Ω–Ω—è" TEXT, –§–û–¢–û_1 BLOB, –§–û–¢–û_2 BLOB, –§–û–¢–û_3 BLOB, –§–ê–ô–õ_1 BLOB, –§–ê–ô–õ_2 BLOB, –§–ê–ô–õ_3 BLOB, –ö–û–õ–ò_–ó–ê–î–ê–ù–û TEXT, –î–û–ö–ò_–ê–ö–¢–£–ê–õ–¨–ù–ê TEXT, –î–ê–¢–ê_–í–ò–î–ê–õ–ï–ù–ù–Ø TEXT)'
#        )
#    bot.send_message(message.chat.id, "–í—Å–µ –≥–æ—Ç–æ–≤–æ‚úÖ")
#    message_handler_start(message)
def jurnal1(message):
    user_id = message.chat.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT grypa FROM login_id WHERE id = {user_id}")
    user_grypa = cursor.fetchone()[0]
    user_grypa = user_grypa.upper().replace('_', '-')

    db_filename = user_grypa + '.db'
    if os.path.exists(db_filename):                 #1_1234
        bot.send_message(message.chat.id,f"–ñ—É—Ä–Ω–∞–ª –≥—Ä—É–ø–∏ {user_grypa} –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        jurnal1_1(message)

    else:                                           #2_1234
        bot.send_message(message.chat.id,f"–î–∞–≤–∞–π—Ç–µ —è –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∂—É—Ä–Ω–∞–ª –¥–ª—è –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ {user_grypa}",reply_markup=telebot.types.ReplyKeyboardRemove())
        jurnal2_1(message, user_grypa)
def jurnal1_1(message):
    user_id = message.chat.id
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT grypa FROM login_id WHERE id = {user_id}")
    user_grypa = cursor.fetchone()[0]
    user_grypa = user_grypa.upper().replace('_', '-')

    db_filename = user_grypa + '.db'
    conn.close()
    jurnal1_2_1interval(message, db_filename, user_grypa)

def jurnal1_2_1interval(message, db_filename, user_grypa):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute("SELECT –õ–µ–∫—Ü—ñ–π–Ω–∏–π_–¢–∏–∂–¥–µ–Ω—å FROM –õ–µ–∫—Ü—ñ–π–Ω–∏–π_–¢–∏–∂–¥–µ–Ω—å")
    close = cursor.fetchone()[0]
    if close == "–ó–∞–∫—Ä–∏—Ç–∏–π":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        markup.add(types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Çüìö'), types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏üìö'))
        markup.add(types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –°—Ç—É–¥–µ–Ω—Ç–∞üéì'), types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–∏üéì'))
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, –∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫", reply_markup=markup)
        conn.commit()
        conn.close()
        bot.register_next_step_handler(message, jurnal1_2_2interval, db_filename, user_grypa)

    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        markup.add(types.KeyboardButton('–õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å'))
        markup.add(types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Çüìö'),types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏üìö'))
        markup.add(types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –°—Ç—É–¥–µ–Ω—Ç–∞üéì'),types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–∏üéì'))

        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, –∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫",reply_markup=markup)
        conn.commit()
        conn.close()
        bot.register_next_step_handler(message, jurnal1_2_2interval, db_filename,user_grypa)
def jurnal1_2_2interval(message, db_filename, user_grypa):
    text = message.text
    if text == 'üîô–ù–∞–∑–∞–¥':
        menu_starostam(message)

    elif text == '–õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥')
        item2 = types.KeyboardButton('–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –ù')
        item3 = types.KeyboardButton('–ó–∞–∫—Ä–∏—Ç–∏ –õ. —Ç–∏–∂–¥–µ–Ω—å')
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —ñ–∑ –ª–µ–∫—Ü—ñ–π–Ω–∏–º —Ç–∏–∂–Ω–µ–º ", reply_markup=markup)
        bot.register_next_step_handler(message, less, db_filename, user_grypa)
    elif text == '–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Çüìö':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–¢–∞–∫üëå')
        item2 = types.KeyboardButton('–ù—ñüëéüèø')
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id,"–û—É—É –æ–∫–µ–π –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç —É —Å–≤—ñ–π –∂—É—Ä–Ω–∞–ª –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ —â–æ —Ö–æ—á–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏?",reply_markup=markup)
        bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_1, db_filename, user_grypa)
    elif text == '–î–æ–¥–∞—Ç–∏ –°—Ç—É–¥–µ–Ω—Ç–∞üéì':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–¢–∞–∫üëå')
        item2 = types.KeyboardButton('–ù—ñüëéüèø')
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id,"–û—É—É –æ–∫–µ–π –≤–∏ –≤–∏—Ä—ñ—à–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É —Å–≤—ñ–π –∂—É—Ä–Ω–∞–ª –≤–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏?",reply_markup=markup)
        bot.register_next_step_handler(message, jurnal1_3_student_add, db_filename)
    elif text == '–ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–∏üéì':
        conn = sqlite3.connect(f'{db_filename}')
        cursor = conn.cursor()
        cursor.execute('SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY')
        result = cursor.fetchall()
        result_string = '\n'.join(item[0] for item in result)
        bot.send_message(message.chat.id,f"–û—Å—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏\n\n{result_string}")
        bot.register_next_step_handler(message, jurnal1_2_2interval, db_filename, user_grypa)
    elif text == '–†–æ–±–æ—Ç–∞ –∑ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏üìö':
        jurnal1_2(message, db_filename, user_grypa)


def less(message,db_filename, user_grypa):
    text = message.text
    if text == 'üîô–ù–∞–∑–∞–¥':
        jurnal1_2_1interval(message, db_filename, user_grypa)
    elif text == '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥':
        edit_less(message,db_filename, user_grypa)

    elif text == '–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –ù':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ü–æ–Ω–µ–¥—ñ–ª–æ–∫')
        item2 = types.KeyboardButton('–í—ñ–≤—Ç–æ—Ä–æ–∫')
        item3 = types.KeyboardButton('–°–µ—Ä–µ–¥–∞')
        item4 = types.KeyboardButton('–ß–µ—Ç–≤–µ—Ä')
        item5 = types.KeyboardButton('–ü\'—è—Ç–Ω–∏—Ü—è')
        item6 = types.KeyboardButton('–°—É–±–æ—Ç–∞')
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        markup.add(item1, item2, item3)
        markup.add(item4, item5, item6)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –ù",reply_markup=markup)
        bot.register_next_step_handler(message, grate_less, db_filename, user_grypa)

    elif text == '–ó–∞–∫—Ä–∏—Ç–∏ –õ. —Ç–∏–∂–¥–µ–Ω—å':
        close_less(message,db_filename, user_grypa)




def grate_less(message,db_filename, user_grypa):
    day = message.text
    if day == 'üîô–ù–∞–∑–∞–¥':
        jurnal1_1(message)
    elif day in ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫','–í—ñ–≤—Ç–æ—Ä–æ–∫','–°–µ—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä','–ü\'—è—Ç–Ω–∏—Ü—è','–°—É–±–æ—Ç–∞']:
        day = day.replace("\'", "")
        table_name = f"–ª–µ–∫—Ü—ñ–π–Ω–∏–π_{day}"
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        column_names = [column[1] for column in columns if column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
        for column_name in column_names:
            markup.add(column_name)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –ù", reply_markup=markup)
        conn.close()
        bot.register_next_step_handler(message, grate_less_2, db_filename, user_grypa, column_names,table_name)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –ù")
        bot.register_next_step_handler(message, grate_less, db_filename, user_grypa)


def grate_less_2(message,db_filename, user_grypa, column_names,table_name):
    pred = message.text
    if pred in column_names:
        bot.send_message(message.chat.id,
                         "–û—Ü—ñ–Ω–∫–∏ –Ω–µ —Å—Ç–∞–≤—Ç–µ –∞ —Å—Ç–∞–≤—Ç–µ —Ç—ñ–ª—å–∫–∏ –ù —è–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç –±—É–≤ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —Ç–æ –ø—Ä–æ–ø—É—Å–∫")
        bot.send_message(message.chat.id,
                         "–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –ù\n–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - \n–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –ù")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()

        # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–≤–ø—Ü—è "–°—Ç—É–¥–µ–Ω—Ç–∏" —Ç–∞–±–ª–∏—Ü—ñ "STUDENTY"
        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        students_list = "\n".join([student[0] + ' - ' for student in students])

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –±–æ—Ç–∞
        bot.send_message(message.chat.id, f"<code>{students_list}</code>", parse_mode=ParseMode.HTML)
        conn.close()
        bot.register_next_step_handler(message, grate_less_3, db_filename, user_grypa, pred,table_name)
    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, grate_less_2, db_filename, user_grypa, column_names,table_name)

def grate_less_3(message,db_filename, user_grypa, pred,table_name):
    text = message.text
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    text = text.split("\n")
    split = []


    for i in text:
        student_data = i.split(" - ")
        if len(student_data) == 2:
            split.append(student_data)
    spec = "_<>,.?!@#$%^&*()+=`\"\'"
    for i in split:
        for k,w in enumerate(i):
            if w in spec or w == "" or w == " ":
                i[k] = None

    splitnot =[]
    split2 = []
    for i in split:
        for k,w in enumerate(i):
            if w.isdigit():
                splitnot.append(i[k])

            else:
                split2.append(i[k])

    if len(splitnot) > 0:
        list = tuple(splitnot)
        message_text = "\n\n".join(list)
        bot.send_message(message.chat.id,f"{message_text} –û—Å—å —Ü—ñ —Ä—è–¥–∫–∏ —è –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n\n–ü–Ü–ë - –ù\n–ü–Ü–ë - ")
        bot.register_next_step_handler(message, grate_less_3, db_filename, user_grypa)
    else:
        for row in split:
            student_data = row.split(" - ")
            name, grade = student_data
            cursor.execute(f"UPDATE {table_name} SET [{pred}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",(grade, name))
            conn.commit()
            conn.close()




def edit_less(message,db_filename, user_grypa):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ü–æ–Ω–µ–¥—ñ–ª–æ–∫')
    item2 = types.KeyboardButton('–í—ñ–≤—Ç–æ—Ä–æ–∫')
    item3 = types.KeyboardButton('–°–µ—Ä–µ–¥–∞')
    item4 = types.KeyboardButton('–ß–µ—Ç–≤–µ—Ä')
    item5 = types.KeyboardButton('–ü\'—è—Ç–Ω–∏—Ü—è')
    item6 = types.KeyboardButton('–°—É–±–æ—Ç–∞')
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
    markup.add(item1,item2,item3)
    markup.add(item4,item5,item6)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –≤ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", reply_markup=markup)
    bot.register_next_step_handler(message, edit_less_2, db_filename, user_grypa)
def edit_less_2(message,db_filename, user_grypa):
    text = message.text
    if text == '–ü\'—è—Ç–Ω–∏—Ü—è':
        text1 = '–ü\'—è—Ç–Ω–∏—Ü—è'
    elif text in ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫','–í—ñ–≤—Ç–æ—Ä–æ–∫','–°–µ—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä','–°—É–±–æ—Ç–∞']:
        text1 = text

    elif text == 'üîô–ù–∞–∑–∞–¥':
        jurnal1(message)
    else:
        bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î, –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, edit_less_2, db_filename, user_grypa)
    text = text.replace("`",'')
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info(–ª–µ–∫—Ü—ñ–π–Ω–∏–π_{text})")
    columns = cursor.fetchall()
    columns_names = [item[1] for item in columns]
    columns_names.remove(columns_names[0])
    formatted_strings = []
    for i, subject in enumerate(columns_names):
        formatted_strings.append(f"{i + 1}) {subject}")
    formatted_output = "\n".join(formatted_strings)
    bot.send_message(message.chat.id, f"–û—Å—å —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ {text1}\n{formatted_output}",reply_markup=telebot.types.ReplyKeyboardRemove())
    time.sleep(1)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏')
    item2 = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    markup.add(item2)
    markup.add(item1)
    bot.send_message(message.chat.id, f'–ú–æ–∂–ª–∏–≤–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª–µ–∫—Ü—ñ–π–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ {text}, —è–∫—â–æ —Ç–∞–∫ —Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏", —è–∫—â–æ –Ω—ñ —Ç–æ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –∫–Ω–æ–ø–∫–æ—é "üîô–ù–∞–∑–∞–¥"',reply_markup=markup)
    bot.register_next_step_handler(message, edit_less_3, db_filename, user_grypa,text)
def edit_less_3(message,db_filename, user_grypa,text):
    txt = message.text
    day = text
    if txt == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏':
        bot.send_message(message.chat.id,
                         f"–©–æ –∂ –≤–∏ –æ–±—Ä–∞–ª–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è {text} —É –ª–µ–∫—Ü—ñ–π–Ω–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –º–µ–Ω—ñ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ —ñ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—Ö\n‚ÄºÔ∏è–Ø–∫—â–æ —É –≤–∞—Å –Ω–µ–º–∞—î –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 2 –ø–∞—Ä–∏ –∑–∞–º—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ –ø–∞—Ä–∏ –Ω–∞–ø–∏—à—ñ—Ç—å (–ø–∞—Ä–∞ –≤—ñ–¥—Å—É—Ç–Ω—è)‚ÄºÔ∏è")
        bot.send_message(message.chat.id,
                         "–ü—Ä–µ–¥–º–µ—Ç - –ü–Ü–ë –í–∏–∫–ª–∞–¥–∞—á–∞\n–ü—Ä–µ–¥–º–µ—Ç - –ü–Ü–ë –í–∏–∫–ª–∞–¥–∞—á–∞\n–ü—Ä–µ–¥–º–µ—Ç - –ü–Ü–ë –í–∏–∫–ª–∞–¥–∞—á–∞\n–ü—Ä–µ–¥–º–µ—Ç - –ü–Ü–ë –í–∏–∫–ª–∞–¥–∞—á–∞\n",reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message,edit_less_4, db_filename, user_grypa,day)
    elif txt == 'üîô–ù–∞–∑–∞–¥':
        jurnal1_1(message)
    else:
        bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î")
        bot.register_next_step_handler(message, edit_less_3, db_filename, user_grypa, text)
def remove_numbering(text_list):
    return [line.split(". ")[1] if ". " in line else line for line in text_list]
def edit_less_4(message,db_filename, user_grypa, day):
    text = message.text
    text = text.split("\n")
    text = remove_numbering(text)
    if len(text) != 4:
        bot.send_message(message.chat.id, f"–ú–∞—î –±—É—Ç–∏ –≤–≤–µ–¥–µ–Ω–æ —Ä—ñ–≤–Ω–æ 4 –ø—Ä–µ–¥–º–µ—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑.",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, edit_less_4, db_filename, user_grypa, day)
    else:
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info(–ª–µ–∫—Ü—ñ–π–Ω–∏–π_{day})")
        columns = cursor.fetchall()
        columns_names = [item[1] for item in columns]
        columns_names.remove(columns_names[0])
        t=0
        for i in columns_names:
            cursor.execute(f"ALTER TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_{day} RENAME COLUMN [{i}] TO [{text[t]}]")
            t+=1

        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        bot.send_message(message.chat.id, "–†–æ–∑–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=telebot.types.ReplyKeyboardRemove())
        jurnal1_2_1interval(message, db_filename, user_grypa)


def close_less(message,db_filename, user_grypa):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–¢–∞–∫üëå')
    item2 = types.KeyboardButton('–ù—ñüëéüèø')
    markup.add(item1)
    markup.add(item2)
    bot.send_message(message.chat.id,"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –∑–∞–∫—Ä–∏—Ç–∏ –ª–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å?",reply_markup=markup)
    bot.register_next_step_handler(message, close_less_2, db_filename, user_grypa)
def close_less_2(message,db_filename, user_grypa):
    text = message.text
    if text == '–¢–∞–∫üëå':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        subject = "–ó–∞–∫—Ä–∏—Ç–∏–π"
        cursor.execute(f'UPDATE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_—Ç–∏–∂–¥–µ–Ω—å SET –õ–µ–∫—Ü—ñ–π–Ω–∏–π_—Ç–∏–∂–¥–µ–Ω—å = ?',(subject,))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–õ–µ–∫—Ü—ñ–π–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–∫—Ä–∏—Ç–∏–π —è–∫—â–æ –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –π–æ–≥–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ /support")
        jurnal1_2_1interval(message, db_filename, user_grypa)
    if text == '–ù—ñüëéüèø':
        bot.send_message(message.chat.id,f"–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –≤ –º–µ–Ω—é —Ä–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–æ–º...")
        jurnal1_2_1interval(message, db_filename, user_grypa)



def jurnal1_2(message,db_filename,user_grypa):
    conn = sqlite3.connect(f'{db_filename}')
    cursor = conn.cursor()
    cursor.execute('SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏')
    result = cursor.fetchall()

    keyboard = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
    for row in result:
        subject = row[0]
        keyboard.append(subject)
        markup.add(types.KeyboardButton(subject))


    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∂—É—Ä–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç—É –∑ —è–∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∞–±–æ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ –∂—É—Ä–Ω–∞–ª—É", reply_markup=markup)
    bot.register_next_step_handler(message, jurnal1_3, db_filename,user_grypa,keyboard)
    conn.close()
def jurnal1_3(message,db_filename,user_grypa,keyboard):
    subject = message.text
    if subject == 'üîô–ù–∞–∑–∞–¥':
        jurnal1_2_1interval(message, db_filename, user_grypa)

    elif subject.startswith('/'):
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –±—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç:")
        jurnal1_2(message, db_filename, user_grypa)




    elif subject in keyboard:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ú–æ–¥—É–ª—å 1')
        item2 = types.KeyboardButton('–ú–æ–¥—É–ª—å 2')
        item3 = types.KeyboardButton('–Ü–ù–î–ó')
        back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
        markup.add(back)
        markup.add(item1)
        markup.add(item2)
        markup.add(item3)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, —Ä–æ–∑–¥—ñ–ª:",reply_markup=markup)
        bot.register_next_step_handler(message, jurnal1_4, db_filename, user_grypa, subject)

    else:
        bot.send_message(message.chat.id,"–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑–æ–∫")
        jurnal1_1(message)
def jurnal1_3_student_add(message,db_filename):
    text = message.text
    if text == '–¢–∞–∫üëå':
        bot.send_message(message.chat.id,"–ó–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É —Å–≤—ñ–π –∂—É—Ä–Ω–∞–ª.\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –π–æ–≥–æ –ü—Ä—ñ–∑–≤–∏—â–µ –Ü–º\'—è –ü–æ-–±–∞—Ç—å–∫–æ–≤—ñ",reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, jurnal1_3_student_add_2, db_filename)

    elif text == '–ù—ñüëéüèø':
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –Ω–∞–∑–∞–¥...")
        time.sleep(2)
        jurnal1_1(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑–æ–∫")
        jurnal1_1(message)
def jurnal1_3_student_add_2(message,db_filename):
    text = message.text
    if has_special_characters(text):
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞ –Ω–∞–≤—ñ—â–æ —Ç–∏ –Ω–∞–¥—ñ—à—Å–ª–∞–≤ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–∏?\n–ù–∞–¥—ñ—à–ª–∏ —â–µ —Ä–∞–∑ –ü–Ü–ë –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        bot.register_next_step_handler(message, jurnal1_3_student_add_2, db_filename)
    else:
        jurnal1_3_student_add_3(message,db_filename, text)
def has_special_characters(text):
    special_characters = ".,/\\|?!@$%^:;&*()_+=[]{}\n\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"
    for char in text:
        if char in special_characters:
            return True
    return False
def jurnal1_3_student_add_3(message,db_filename, text):
    words = text.split()

    # –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ—Å—Ç—Ä –ø–µ—Ä—à–æ—ó –ª—ñ—Ç–µ—Ä–∏ –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–≤–µ–ª–∏–∫–∞ –ª—ñ—Ç–µ—Ä–∞)
    formatted_words = [word.capitalize() for word in words]

    # –ü—Ä–∏—î–¥–Ω–∞—Ç–∏ —Å–ª–æ–≤–∞ –∑–Ω–æ–≤—É, –≤—Å—Ç–∞–≤–∏–≤—à–∏ –ø—Ä–æ–±—ñ–ª –º—ñ–∂ –Ω–∏–º–∏
    text = " ".join(formatted_words)
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
    res = cursor.fetchall()
    res = [item.lower() for tpl in res for item in tpl]
    for i in res:
        i = i.replace(" ", "_")
        cursor.execute(f"PRAGMA table_info({i}_1)")
        columns = cursor.fetchall()

        column_names = ['[' + column[1] + "]" for column in columns]

        st = ", ".join(column_names)
        j = []

        for n in range(len(column_names)-1):
            j.append("NULL")
        j_st = ", ".join(j)
        cursor.execute(f'INSERT INTO "{i}_1" ({st}) VALUES ("{text}", {j_st})')




        cursor.execute(f"PRAGMA table_info({i}_2)")
        columns = cursor.fetchall()

        column_names = ['[' + column[1] + "]" for column in columns]

        st = ", ".join(column_names)
        j=[]
        for n in range(len(column_names)-1):
            j.append("NULL")
        j_st = ", ".join(j)
        cursor.execute(f'INSERT INTO "{i}_2" ({st}) VALUES ("{text}", {j_st})')

        cursor.execute(f"PRAGMA table_info([{i}_3])")
        columns_info = cursor.fetchall()
        columns_names = [column_info[1] for column_info in columns_info]
        exam_type = columns_names[2]

        cursor.execute(f'INSERT INTO "{i}_3" (–°—Ç—É–¥–µ–Ω—Ç–∏, –Ü–Ω–¥–∑, [{exam_type}],  –º–æ–¥—É–ª—å_1, –º–æ–¥—É–ª—å_2, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤) VALUES ("{text}", NULL, NULL, NULL, NULL, NULL)')



        cursor.execute(f"PRAGMA table_info({i}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏)")
        columns = cursor.fetchall()

        column_names = ['[' + column[1] + "]" for column in columns]
        st = ", ".join(column_names)
        j = []
        for n in range(len(column_names) - 1):
            j.append("NULL")
        j_st = ", ".join(j)
        if len(column_names)>1:
            cursor.execute(f'INSERT INTO "{i}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏" ({st}) VALUES ("{text}", {j_st})')

        else:
            cursor.execute(f'INSERT INTO "{i}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏" (–°—Ç—É–¥–µ–Ω—Ç–∏) VALUES ("{text}")')






        cursor.execute(f'INSERT INTO "{i}_–°—Ç—É–¥–µ–Ω—Ç–∏" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_1, –º–æ–¥—É–ª—å_2, [–Ü–Ω–¥–∑],[{exam_type}], –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤) VALUES ("{text}", NULL, NULL, NULL, NULL, NULL)')

    cursor.execute(f'INSERT INTO "STUDENTY" (–°—Ç—É–¥–µ–Ω—Ç–∏) VALUES ("{text}")')
    bot.send_message(message.chat.id,"–°—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –Ω–∞–¥—ñ—é—Å—å –≤–∏ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ü–Ü–ë —Å—Ç—É–¥–µ–Ω—Ç–∞)")
    conn.commit()
    conn.close()
def jurnal1_3_dodavanya_predmety_1(message, db_filename, user_grypa):
    text = message.text
    if text == '–¢–∞–∫üëå':
        bot.send_message(message.chat.id,"–ú–∞–∫—Å–∏–º—É–º –∑–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç–∏ –ª–∏—à–µ –∑–∞ –û–î–ò–ù —Ä–∞–∑ –û–î–ò–ù –ø—Ä–µ–¥–º–µ—Ç\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n–ü—Ä–µ–¥–º–µ—Ç - –Ñ–ö–¢–°, –¢–∏–ø –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)

    elif text == '–ù—ñüëéüèø':
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –Ω–∞–∑–∞–¥...")
        time.sleep(2)
        jurnal1_1(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑–æ–∫")
        jurnal1_1(message)
def jurnal1_3_dodavanya_predmety_2(message, db_filename):
    pred = message.text
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏–§—ñ–∑–º–∞—Ç—É FROM –ü—Ä–µ–¥–º–µ—Ç–∏–§—ñ–∑–º–∞—Ç—É")
    result = cursor.fetchall()
    result = [item.lower() for tpl in result for item in tpl]

    lines = pred.split('\n')
    if len(lines) > 1:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –∑–∞–±–∞–≥–∞—Ç–æ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑–∞—Ä–∞–∑ –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –ª–∏—à–µ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç")
        bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)
    else:
        elements = pred.split(' - ')

        if len(elements) != 2:
            bot.send_message(message.chat.id, f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞\n{pred}\n–í–≤–µ–¥—ñ—Ç—å –∑–∞ –∑—Ä–∞–∑–∫–æ–º –ü—Ä–µ–¥–º–µ—Ç - –Ñ–ö–¢–°, –¢–∏–ø –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é 1")
            bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)
        else:
            infopred = [i for el in elements for i in el.split(",")]
            infopred = [item.strip().lower() for item in infopred]

            if len(infopred) !=3:
                bot.send_message(message.chat.id, f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞\n{pred}\n–í–≤–µ–¥—ñ—Ç—å –∑–∞ –∑—Ä–∞–∑–∫–æ–º –ü—Ä–µ–¥–º–µ—Ç - –Ñ–ö–¢–°, –¢–∏–ø –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é 2")
                bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)
            else:

                if infopred[0].lower() in result:
                    connect = sqlite3.connect(f'{db_filename}')
                    cur = connect.cursor()
                    cur.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏ FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
                    res = cur.fetchall()
                    res = [item.lower() for tpl in res for item in tpl]
                    connect.close()
                    conn.close()
                    if infopred[0].lower() in res:
                        bot.send_message(message.chat.id, f"–¢–∞–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —ñ—Å–Ω—É—î –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç")
                        bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)
                    else:
                        if infopred[1].isdigit():
                            if infopred[2].lower() not in ["–µ–∫–∑–∞–º–µ–Ω","–∑–∞–ª—ñ–∫"]:

                                bot.send_message(message.chat.id,f"–¢–∏–ø –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–∫–∞–∑–∞–Ω–∏–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                                bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)
                            else:
                                jurnal1_3_dodavanya_predmety_3(message, db_filename, infopred)
                        else:
                            bot.send_message(message.chat.id, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤ –ï–ö–¢–° –≤–∫–∞–∑–∞–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                            bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)

                else:
                    bot.send_message(message.chat.id, f"–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É —É –Ω–∞—à—ñ–π –±–∞–∑—ñ –Ω–µ–º–∞—î –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø—Ä–µ–¥–º–µ—Ç")
                    bot.register_next_step_handler(message, jurnal1_3_dodavanya_predmety_2, db_filename)
def jurnal1_3_dodavanya_predmety_3(message, db_filename,infopred):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    subject_name, credits, exam_type = infopred[0], infopred[1], infopred[2]
    cursor.execute("INSERT INTO –ü—Ä–µ–¥–º–µ—Ç–∏ (–ü—Ä–µ–¥–º–µ—Ç–∏, –ö—Ä–µ–¥–∏—Ç–∏_–Ñ–ö–¢–°, –§–æ—Ä–º–∞_–ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ_–∫–æ–Ω—Ç—Ä–æ–ª—é) VALUES (?, ?, ?)",(subject_name, credits, exam_type))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–°—Ç–≤–æ—Ä—é—é —Ç–∞–±–ª–∏—Ü—ñ –∑ –≤–∞—à–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º...")
    jurnal1_3_dodavanya_predmety_4_—Åreate(message, db_filename, subject_name, credits, exam_type)
def jurnal1_3_dodavanya_predmety_4_—Åreate(message, db_filename,subject_name, credits, exam_type):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    pre = subject_name
    pre = pre.replace(" ", "_")
    cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
    students = cursor.fetchall()
    for i in range(1):
        cursor.execute(f'CREATE TABLE "{pre}_1" ( –°—Ç—É–¥–µ–Ω—Ç–∏ TEXT, –º–æ–¥—É–ª—å_1 TEXT, –ù TEXT, [—Ç–µ–º–∞ 0] TEXT,[—Ç–µ–º–∞ 1] TEXT, [—Ç–µ–º–∞ 2] TEXT, [—Ç–µ–º–∞ 3] TEXT, [—Ç–µ–º–∞ 4] TEXT, [—Ç–µ–º–∞ 5] TEXT, [—Ç–µ–º–∞ 6] TEXT, [—Ç–µ–º–∞ 7] TEXT,  [—Ç–µ–º–∞ 8] TEXT, [—Ç–µ–º–∞ 9] TEXT)')
        cursor.execute(f'INSERT INTO "{pre}_1" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_1, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–î–∞—Ç–∞", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')
        cursor.execute(f'INSERT INTO "{pre}_1" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_1, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')

        cursor.execute( f'CREATE TABLE "{pre}_2" ( –°—Ç—É–¥–µ–Ω—Ç–∏ TEXT, –º–æ–¥—É–ª—å_2 TEXT, –ù TEXT, [—Ç–µ–º–∞ 0] TEXT,[—Ç–µ–º–∞ 1] TEXT, [—Ç–µ–º–∞ 2] TEXT, [—Ç–µ–º–∞ 3] TEXT, [—Ç–µ–º–∞ 4] TEXT, [—Ç–µ–º–∞ 5] TEXT, [—Ç–µ–º–∞ 6] TEXT, [—Ç–µ–º–∞ 7] TEXT,  [—Ç–µ–º–∞ 8] TEXT, [—Ç–µ–º–∞ 9] TEXT)')
        cursor.execute(f'INSERT INTO "{pre}_2" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_2, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–î–∞—Ç–∞",NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')
        cursor.execute(f'INSERT INTO "{pre}_2" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_2, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')

        cursor.execute(f'CREATE TABLE "{pre}_3" ("–°—Ç—É–¥–µ–Ω—Ç–∏" TEXT,–Ü–Ω–¥–∑ TEXT,[{exam_type}] TEXT, –º–æ–¥—É–ª—å_1 TEXT, –º–æ–¥—É–ª—å_2 TEXT, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ TEXT)')
        cursor.execute(f'INSERT INTO "{pre}_3" (–°—Ç—É–¥–µ–Ω—Ç–∏, –Ü–Ω–¥–∑, [{exam_type}],  –º–æ–¥—É–ª—å_1, –º–æ–¥—É–ª—å_2, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤) VALUES ("–î–∞—Ç–∞", NULL, NULL, NULL, NULL, NULL)')
        cursor.execute(f'INSERT INTO "{pre}_3" (–°—Ç—É–¥–µ–Ω—Ç–∏, –Ü–Ω–¥–∑, [{exam_type}],  –º–æ–¥—É–ª—å_1, –º–æ–¥—É–ª—å_2, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤) VALUES ("–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è", NULL, NULL, NULL, NULL, NULL)')

        cursor.execute(f'CREATE TABLE "{pre}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏" (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT)')
        cursor.execute(f'INSERT INTO "{pre}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏" (–°—Ç—É–¥–µ–Ω—Ç–∏) VALUES ("–î–∞—Ç–∞")')
        cursor.execute(f'INSERT INTO "{pre}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏" (–°—Ç—É–¥–µ–Ω—Ç–∏) VALUES ("–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è")')

        cursor.execute(f'CREATE TABLE "{pre}_–°—Ç—É–¥–µ–Ω—Ç–∏" ("–°—Ç—É–¥–µ–Ω—Ç–∏" TEXT, –º–æ–¥—É–ª—å_1 TEXT, –º–æ–¥—É–ª—å_2 TEXT, [–Ü–Ω–¥–∑] TEXT,[{exam_type}] TEXT, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ TEXT)')
    # cursor.execute(f'INSERT INTO "{pre}_–°—Ç—É–¥–µ–Ω—Ç–∏" ("–°—Ç—É–¥–µ–Ω—Ç–∏", [–º–æ–¥—É–ª—å 1], [–º–æ–¥—É–ª—å 2], [—ñ–Ω–¥–∑], [–ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å], [–∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤]) VALUES ("–î–∞—Ç–∞", NULL, NULL, NULL, NULL, NULL)')

    for student in students:
        cursor.execute(f"INSERT INTO \"{pre}_1\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
        cursor.execute(f"INSERT INTO \"{pre}_2\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
        cursor.execute(f"INSERT INTO \"{pre}_3\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
        cursor.execute(f"INSERT INTO \"{pre}_–°—Ç—É–¥–µ–Ω—Ç–∏\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
        cursor.execute(f"INSERT INTO \"{pre}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))


    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ‚úÖ")
    jurnal1_1(message)



def jurnal1_4(message,db_filename,user_grypa,subject):
    table = message.text

    subject = subject.replace(" ", "_")



    if table == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    elif table == '–Ü–ù–î–ó':
        indz(message,db_filename,subject)

    elif table.startswith('/'):
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –±—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏")
        jurnal1_3(message, db_filename, user_grypa,subject)



    elif table in ['–ú–æ–¥—É–ª—å 1', '–ú–æ–¥—É–ª—å 2']:
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_1, –ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_2 FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = '{subject.replace('_', ' ')}'")
        row = cursor.fetchone()
        if table == '–ú–æ–¥—É–ª—å 1' and row[0]== '–ó–∞–∫—Ä–∏—Ç–∏–π –º–æ–¥—É–ª—å 1':
            bot.send_message(message.chat.id, f'–ú–æ–¥—É–ª—å 1 —ñ–∑ –ø—Ä–µ–¥–º–µ—Ç—É {subject.replace("_", " ")} –∑–∞–∫—Ä–∏—Ç–∏–π –≤–∞—à–∏–º –≤–∏–∫–ª–∞–¥–∞—á–µ–º –≤–∏ –≤–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –∞–ª–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —Å–≤–æ—ó—Ö –æ–¥–æ–≥—Ä—É–ø–Ω–∏–∫—ñ–≤')
            if table == '–ú–æ–¥—É–ª—å 1':
                table = '1'
            elif table == '–ú–æ–¥—É–ª—å 2':
                table = '2'

            jurnal_prerglad_ocinok_dla_starost(message,db_filename,user_grypa,subject, table)


        elif table == '–ú–æ–¥—É–ª—å 2' and row[1]== '–ó–∞–∫—Ä–∏—Ç–∏–π –º–æ–¥—É–ª—å 2':
            bot.send_message(message.chat.id,f'–ú–æ–¥—É–ª—å 2 —ñ–∑ –ø—Ä–µ–¥–º–µ—Ç—É {subject.replace("_", " ")} –∑–∞–∫—Ä–∏—Ç–∏–π –≤–∞—à–∏–º –≤–∏–∫–ª–∞–¥–∞—á–µ–º –≤–∏ –≤–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –∞–ª–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —Å–≤–æ—ó—Ö –æ–¥–æ–≥—Ä—É–ø–Ω–∏–∫—ñ–≤')
            if table == '–ú–æ–¥—É–ª—å 1':
                table = '1'
            elif table == '–ú–æ–¥—É–ª—å 2':
                table = '2'

            jurnal_prerglad_ocinok_dla_starost(message, db_filename, user_grypa, subject, table)

        else:
            if table == '–ú–æ–¥—É–ª—å 1':
                table = '1'
            elif table == '–ú–æ–¥—É–ª—å 2':
                table = '2'

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É')#
            item7 = types.KeyboardButton('–ü–µ—Ä–µ–≥–ª—è–¥ –æ—Ü—ñ–Ω–æ–∫')#
            item2 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–µ–º–∏')#
            item3 = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ —Ç–µ–º—É')#
            #item4 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏') #–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–π–≤–∏–π\–¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π
            #item5 = types.KeyboardButton('–ó–∞–∫—Ä–∏—Ç–∏ –º–æ–¥—É–ª—å')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item7)
            markup.add(item1)
            markup.add(item2)
            markup.add(item3)

            bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≤ –∂—É—Ä–Ω–∞–ª—ñ:", reply_markup=markup)


            bot.register_next_step_handler(message, jurnal1_5, db_filename, user_grypa, subject, table)

    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î')
        bot.register_next_step_handler(message,jurnal1_4, db_filename, user_grypa, subject)
def indz(message,db_filename,subject):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    #reply_markup = telebot.types.ReplyKeyboardRemove()
    cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
    students = cursor.fetchall()

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    students_list = "\n".join([student[0] + ' - ' for student in students])

    bot.send_message(message.chat.id,"–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ —ó—Ö–Ω—î –ø–æ–≤–Ω–µ —ñ–º\'—è.\n–¥–ª—è –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫ –∑–∞ –Ü–ù–î–ó Ô∏è\n–¢–∞–∫–æ–∂ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —Å–ø–∏—Å–æ–∫ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏, –¥–ª—è –∑—Ä—É—á–Ω—ñ—à–æ–≥–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫")
    bot.send_message(message.chat.id,"–ü–Ü–ë  –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞ - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë  –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞ - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë –û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞  - –æ—Ü—ñ–Ω–∫–∞")
    bot.send_message(message.chat.id, f"<code>{students_list}</code>", parse_mode=ParseMode.HTML)
    bot.register_next_step_handler(message, indz_2, db_filename, subject)
def indz_2(message,db_filename,subject):
    text = message.text
    subject = subject.replace(" ", "_")
    table_name = subject + '_1'
    table_name_2 = subject + '_3'
    table_name_STUD = subject + '_–°—Ç—É–¥–µ–Ω—Ç–∏'
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    rows = text.split("\n")
    split = []
    splitnot = []
    for row in rows:
        student_data = row.split(" - ")

        if len(student_data) == 2:
            split.append(row)

        else:
            splitnot.append(row)

    if len(splitnot) == 0:
        for row in split:
            student_data = row.split(" - ")
            name, grade = student_data
            cursor.execute(
                f"UPDATE {table_name_2} SET –Ü–Ω–¥–∑ = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",
                (grade, name))
            cursor.execute(f"UPDATE {table_name_STUD} SET –Ü–Ω–¥–∑ = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",
                (grade, name))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        jurnal1_5_dodavanna_ocinok(message,db_filename, table_name, subject)

    elif len(splitnot) > 0:
        list = tuple(splitnot)
        message_text = "\n\n".join(list)
        bot.send_message(message.chat.id, f"{message_text} –û—Å—å —Ü—ñ —Ä—è–¥–∫–∏ —è –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞")
        bot.register_next_step_handler(message, indz_2, db_filename,subject)



def jurnal1_5(message, db_filename, user_grypa, subject, table):
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    elif message.text == '–î–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = '{subject.replace('_', ' ')}'")
        row = cursor.fetchone()
        row = row[0]
        if row == '–ó–∞–∫—Ä–∏—Ç–∏–π –ø—Ä–µ–¥–º–µ—Ç':
            bot.send_message(message.chat.id,f'–ñ—É—Ä–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç—É {subject.replace("_", " ")} –∑–∞–∫—Ä–∏—Ç–∏–π –≤–∞—à–∏–º –≤–∏–∫–ª–∞–¥–∞—á–µ–º –≤–∏ –≤–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏)')
            jurnal1_1(message)

        else:
            # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ {subject}_{table}
            table_name = f'{subject}_{table}'

            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            column_names = [column[1] for column in columns if column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–º–æ–¥—É–ª—å_1' and column[1] != '–º–æ–¥—É–ª—å_2' and column[1] != '–ù']

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑—ñ —Å–ø–∏—Å–∫—É column_names
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for column_name in column_names:
                markup.add(column_name)
            markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –≤ —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –æ—Ü—ñ–Ω–∫–∏:", reply_markup=markup)
            bot.register_next_step_handler(message, jurnal1_5_1, db_filename, user_grypa, table_name ,column_names,subject,table)
            conn.close()#1_5_1

    elif message.text == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —Ç–µ–º–∏':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = '{subject.replace('_', ' ')}'")
        row = cursor.fetchone()
        row = row[0]
        if row == '–ó–∞–∫—Ä–∏—Ç–∏–π –ø—Ä–µ–¥–º–µ—Ç':
            bot.send_message(message.chat.id,
                             f'–ñ—É—Ä–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç—É {subject.replace("_", " ")} –∑–∞–∫—Ä–∏—Ç–∏–π –≤–∞—à–∏–º –≤–∏–∫–ª–∞–¥–∞—á–µ–º –≤–∏ –≤–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏)')
            jurnal1_1(message)

        else:

            # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ {subject}_{table}
            table_name = f'{subject}_{table}'

            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
            cursor.execute(f"PRAGMA table_info({table_name})")
            columns = cursor.fetchall()
            column_names = [column[1] for column in columns if column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–º–æ–¥—É–ª—å_1' and column[1] != '–º–æ–¥—É–ª—å_2' and column[1] != '–ù']


            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑—ñ —Å–ø–∏—Å–∫—É column_names
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            for column_name in column_names:
                markup.add(column_name)
            markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É, —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:", reply_markup=markup)
            bot.register_next_step_handler(message, jurnal1_tema_1, db_filename, user_grypa, subject, table, column_names)

            conn.close()

    elif message.text == '–î–æ–¥–∞—Ç–∏ —Ç–µ–º—É':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"SELECT –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç FROM –ü—Ä–µ–¥–º–µ—Ç–∏ WHERE –ü—Ä–µ–¥–º–µ—Ç–∏ = '{subject.replace('_', ' ')}'")
        row = cursor.fetchone()
        row = row[0]
        if row == '–ó–∞–∫—Ä–∏—Ç–∏–π –ø—Ä–µ–¥–º–µ—Ç':
            bot.send_message(message.chat.id,f'–ñ—É—Ä–Ω–∞–ª –ø—Ä–µ–¥–º–µ—Ç—É {subject.replace("_", " ")} –∑–∞–∫—Ä–∏—Ç–∏–π –≤–∞—à–∏–º –≤–∏–∫–ª–∞–¥–∞—á–µ–º –≤–∏ –≤–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏)')
            jurnal1_1(message)

        else:
            bot.send_message(message.chat.id,"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó —Ç–µ–º–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É", reply_markup=telebot.types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message,jurnal_1_dodavanna_temy, db_filename,subject, table)

    elif message.text == '–ü–µ—Ä–µ–≥–ª—è–¥ –æ—Ü—ñ–Ω–æ–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('1')
        item2 = types.KeyboardButton('2')
        markup.add(item1)
        markup.add(item2)
        bot.send_message(message.chat.id, "1 - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –≤—Å—å–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É\n2 - –ü–µ—Ä–µ–≥–ª—è–¥ –æ—Ü—ñ–Ω–æ–∫ –≤—Å—ñ—î—ó –≥—Ä—É–ø–∏ —ñ–∑ –æ–∫—Ä–µ–º–æ—ó —Ç–µ–º–∏".format(message.from_user), reply_markup=markup)
        bot.register_next_step_handler(message,  look_grade_1, db_filename, user_grypa, subject, table)

    else:
        bot.send_message(message.chat.id,"–í–∏ –≤–≤–µ–ª–∏ —â–æ—Å—å –Ω–µ —Ç–æ")

        bot.register_next_step_handler(message, jurnal1_5, db_filename, user_grypa, subject, table)
def look_grade_1(message,db_filename, user_grypa, subject, table):
    text = message.text
    if text == "2":
        look_grade_2(message, db_filename, user_grypa, subject, table)
    elif text == '1':
        bot.send_message(message.chat.id,"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤–Ω–µ –ü–Ü–ë —Å—Ç—É–¥–µ–Ω—Ç–∞ —É —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Ü—ñ–Ω–∫–∏")
        bot.register_next_step_handler(message,look_grade_student_1,db_filename, user_grypa, subject, table)
def look_grade_student_1(message,db_filename, user_grypa, subject, table):
    text = message.text
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
    students = cursor.fetchall()
    students = [item for tpl in students for item in tpl]
    if text not in students:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –°—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ–º–∞—î —É –≤–∞—à—ñ–π –≥—Ä—É–ø—ñ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –ø–æ–≤–Ω–µ –ü–Ü–ë")
        bot.register_next_step_handler(message, look_grade_student_1, db_filename, user_grypa, subject, table)
    else:
        look_grade_student_2(message,db_filename, user_grypa, subject, table, text)
def look_grade_student_2(message,db_filename, user_grypa, subject, table, text):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    table_name = f'{subject}_{table}'
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns if
                    column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏']
    column_names_str = ', '.join([f'`{column}`' for column in column_names])
    cursor.execute(f"SELECT {column_names_str} FROM {table_name} WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = '{text}'")
    columns = cursor.fetchall()
    updated_list = [[0 if item is None else item for item in tuple_item] for tuple_item in columns]
    # –û–±'—î–¥–Ω–∞—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —É –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    flat_list = [item for tuple_item in updated_list for item in tuple_item]
    messagee = ''
    for k, i in zip(flat_list, column_names):
        if i == "–ù":
            messagee += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ù - {k}\n"
        else:
            messagee += f"{i} - {k}\n"
    bot.send_message(message.chat.id, f"–û—Ü—ñ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ {text}, –∑ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –∑–∞ –º–æ–¥—É–ª—å {table}\n{messagee}")
    jurnal1_2(message, db_filename, user_grypa)
def look_grade_2(message,db_filename, user_grypa, subject, table):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()

    # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ {subject}_{table}
    table_name = f'{subject}_{table}'

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns if
                    column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–ù']

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑—ñ —Å–ø–∏—Å–∫—É column_names
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
    for column_name in column_names:
        markup.add(column_name)

    bot.send_message(message.chat.id,"–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É, –∑ —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —Å–≤–æ—ó—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∞–±–æ –∑—Ä–∞–∑—É –∑ —Ü—ñ–ª–æ–≥–æ –º–æ–¥—É–ª—è:",reply_markup=markup)
    bot.register_next_step_handler(message, jurnal_1_pereglad_ocinok, db_filename, user_grypa, subject, table,column_names)
def jurnal_1_pereglad_ocinok(message, db_filename, user_grypa, subject, table,column_names):
    text = message.text

    if text == 'üîô–ù–∞–∑–∞–¥':
        jurnal1_2(message, db_filename, user_grypa)
    elif text not in column_names:
        bot.send_message(message.chat.id,"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –Ω–µ –≤—ñ—Ä–Ω—É —Ç–µ–º—É –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, jurnal_1_pereglad_ocinok, db_filename, user_grypa, subject, table,column_names)
    else:
        table_name = f'{subject}_{table}'
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        students_list = "\n".join([student[0] + ' - ' for student in students])

        cursor.execute(f"SELECT [{text}] FROM {table_name} ")
        ocinky = cursor.fetchall()
        ocinky = ocinky[2:]
        ocinky = [item for tpl in ocinky for item in tpl]
        ocinky2 = []
        for i in ocinky:
            if i == None:
                ocinky2.append("0")
            else:
                ocinky2.append(i)

        results = []
        students_list1 = students_list.split("\n")
        for k, i in enumerate(students_list1):
            results.append(i + ocinky2[k])


        gem = "\n".join([row for row in results])

        bot.send_message(message.chat.id, f"–û—Å—å –æ—Ü—ñ–Ω–∫–∏ —ñ–∑ —Ç–µ–º–∏{subject.replace('_', ' ')}\n{gem}")


def jurnal_1_dodavanna_temy(message, db_filename, subject, table):
    new_tema = message.text
    kay = ["–º–æ–¥—É–ª—å 1", '–º–æ–¥—É–ª—å 2', '–ú–æ–¥—É–ª—å 1', '–ú–æ–¥—É–ª—å 2', "–∑–∞–ª—ñ–∫", "–ó–∞–ª—ñ–∫", '–ï–∫–∑–∞–º–µ–Ω', '–µ–∫–∑–∞–º–µ–Ω',
           '–ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å', '–ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å','—Å—Ç—É–¥–µ–Ω—Ç–∏','–°—Ç—É–¥–µ–Ω—Ç–∏']
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({subject}_{table})")
    columns = cursor.fetchall()
    columns_names = [item[1] for item in columns]
    if new_tema in columns_names:
        bot.send_message(message.chat.id, f'–¢–∞–∫–∞ —Ç–µ–º–∞ –≤–∂–µ —ñ—Å–Ω—É—î –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —ó—ó: {new_tema}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —ñ–Ω—à—É –Ω–∞–∑–≤—É —Ç–µ–º–∏')
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy, db_filename, subject, table)
    elif new_tema in kay:
        bot.send_message(message.chat.id, f'–¢–∞–∫—É —Ç–µ–º—É –¥–æ–¥–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ: {new_tema}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —ñ–Ω—à—É –Ω–∞–∑–≤—É —Ç–µ–º–∏')
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy, db_filename, subject, table)


    else:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∫–æ–ª–æ–Ω–∫–∏
        query = f"ALTER TABLE {subject}_{table} ADD COLUMN [{new_tema}] TEXT"
        cursor.execute(query)

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        conn.commit()
        conn.close()
        jurnal_1_dodavanna_temy_2(message, db_filename, subject, table, new_tema)
def jurnal_1_dodavanna_temy_2(message, db_filename, subject, table, new_tema):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    info = types.KeyboardButton('–ü—Ä–∞–∫—Ç–∏—á–Ω–∞')
    info2 = types.KeyboardButton('–õ–µ–∫—Ü—ñ—è')
    markup.add(info)
    markup.add(info2)
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è —ñ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏—â–µ",reply_markup=markup)
    bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_3, db_filename, subject, table,new_tema)
def jurnal_1_dodavanna_temy_3(message, db_filename, subject, table,new_tema):
    text = message.text
    if text == '–ü—Ä–∞–∫—Ç–∏—á–Ω–∞' or text == '–õ–µ–∫—Ü—ñ—è':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        text2 = "–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è"
        cursor.execute(f"UPDATE {subject}_{table} SET [{new_tema}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (text,text2))
        conn.commit()
        conn.close()

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        info = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω–∞ –¥–∞—Ç–∞')
        info2 = types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É')
        markup.add(info)
        markup.add(info2)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –¥–∞—Ç–∏",reply_markup=markup)
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_4, db_filename, subject, table, new_tema)

    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑ —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è")
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_3, db_filename, subject, table, new_tema)
def jurnal_1_dodavanna_temy_4(message, db_filename, subject, table,new_tema):
    text = message.text
    user_id = message.chat.id
    if text == '–ê–∫—Ç—É–∞–ª—å–Ω–∞ –¥–∞—Ç–∞':
        current_date = datetime.datetime.now()
        formatted_date = current_date.strftime("%d.%m.%Y")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        text2 = "–î–∞—Ç–∞"
        cursor.execute(f"UPDATE {subject}_{table} SET [{new_tema}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (formatted_date, text2))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞ {formatted_date} –¥–æ —Ç–µ–º–∏ {new_tema}")
        connect = sqlite3.connect('users.db')
        cursor1 = connect.cursor()
        cursor1.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
        user_rol = cursor1.fetchone()
        user_rol = user_rol[0]
        conn.close()
        connect.close()
        if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
            jurnal1_1(message)
        elif user_rol == '–≤–∏–∫–ª–∞–¥–∞—á':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
            homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
            item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item2)
            markup.add(homework)
            markup.add(item4)
            bot.send_message(message.chat.id,
                             "–í–∏ –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞–º –æ–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏".format(
                                 message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, menu_vikladacham_2)

    elif text == '–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º 01.01.2023")
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_5, db_filename, subject, table, new_tema)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–Ω—Ç—É –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–∞—Ç–∏ —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_4, db_filename, subject, table, new_tema)
def jurnal_1_dodavanna_temy_5(message, db_filename, subject, table,new_tema):
    text = message.text
    lines = text.split(".")
    notcifra = []
    user_id = message.chat.id
    i = 0
    if len(lines) > 3:
        bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞\n–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º 01.01.2023")
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_5, db_filename, subject, table, new_tema)
    elif text.startswith('/'):
        bot.send_message(message.chat.id, f"–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –¥–∞—Ç—É, —è–∫—É –º–∞—î—Ç–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–¥–∞—Ç–∏")
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_5, db_filename, subject, table, new_tema)
    else:

        for item in lines:
            if item.isdigit():
                i+=1
            else:
                notcifra.append(item)

    if len(notcifra)>0:
        bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞\n–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º 01.01.2023")
        bot.register_next_step_handler(message, jurnal_1_dodavanna_temy_5, db_filename, subject, table, new_tema)
    else:
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        text2 = "–î–∞—Ç–∞"
        cursor.execute(f"UPDATE {subject}_{table} SET [{new_tema}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (text, text2))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞ {text} –¥–æ —Ç–µ–º–∏ {new_tema}")

        connect = sqlite3.connect('users.db')
        cursor1 = connect.cursor()
        cursor1.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
        user_rol = cursor1.fetchone()
        user_rol = user_rol[0]
        conn.close()
        connect.close()
        if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
            jurnal1_1(message)
        elif user_rol == '–≤–∏–∫–ª–∞–¥–∞—á':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
            homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
            item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item2)
            markup.add(homework)
            markup.add(item4)
            bot.send_message(message.chat.id,
                             "–í–∏ –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞–º –æ–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏".format(
                                 message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, menu_vikladacham_2)
def jurnal1_tema_1(message, db_filename, user_grypa, subject, table, column_names):
    tema = message.text

    if tema == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)
    elif tema.startswith('/'):
        bot.send_message(message.chat.id, f"–≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –Ω–∞–∑–≤—É —Ç–µ–º–∏, —è–∫—É —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —Ç–µ–º—É")
        bot.register_next_step_handler(message, jurnal1_tema_1, db_filename, user_grypa, subject, table, column_names)

    else:
        if tema in column_names:
            bot.send_message(message.chat.id,f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ç–µ–º–∏, —è–∫—É –≤–∏ –≤–∏–±—Ä–∞–ª–∏ {tema}",reply_markup=telebot.types.ReplyKeyboardRemove())
            bot.register_next_step_handler(message, jurnal1_tema_2 , db_filename, user_grypa, subject, table,column_names,tema)
        else:
            # –¢—É—Ç —Ä–æ–±—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥—ñ—ó, —è–∫—â–æ tema –Ω–µ –≤—Ö–æ–¥–∏—Ç—å —É column_names
            bot.send_message(message.chat.id,f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –Ω–µ –≤—ñ—Ä–Ω—É —Ç–µ–º—É {tema} –æ–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ç–µ–º—É ")
            bot.register_next_step_handler(message, jurnal1_tema_1, db_filename, user_grypa, subject, table,column_names)
def jurnal1_tema_2(message, db_filename, user_grypa, subject, table,column_names,tema):
    tema_new = message.text
    kay = ["–º–æ–¥—É–ª—å 1", '–º–æ–¥—É–ª—å 2', '–ú–æ–¥—É–ª—å 1', '–ú–æ–¥—É–ª—å 2', "–∑–∞–ª—ñ–∫", "–ó–∞–ª—ñ–∫", '–ï–∫–∑–∞–º–µ–Ω', '–µ–∫–∑–∞–º–µ–Ω',
           '–ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å', '–ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å','—Å—Ç—É–¥–µ–Ω—Ç–∏','–°—Ç—É–¥–µ–Ω—Ç–∏']
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({subject}_{table})")
    columns = cursor.fetchall()
    names = [item[1] for item in columns]


    if tema_new == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    elif tema_new in names:
        bot.send_message(message.chat.id, f'–¢–∞–∫–∞ —Ç–µ–º–∞ –≤–∂–µ —ñ—Å–Ω—É—î –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ 2 –æ–¥–∏–Ω–∞–∫–æ–≤–∏—Ö —Ç–µ–º–∏‚ÄºÔ∏è: {tema_new}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —ñ–Ω—à—É –Ω–∞–∑–≤—É —Ç–µ–º–∏')
        bot.register_next_step_handler(message, jurnal1_tema_2, db_filename,user_grypa, subject, table,column_names,tema)
    elif tema_new in kay:
        bot.send_message(message.chat.id, f'–¢–∞–∫—É —Ç–µ–º—É –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–µ–º–æ–∂–ª–∏–≤–æ: {tema_new}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —ñ–Ω—à—É –Ω–∞–∑–≤—É —Ç–µ–º–∏')
        bot.register_next_step_handler(message, jurnal1_tema_2, db_filename, user_grypa, subject, table,column_names,tema)
    elif tema_new.startswith('/'):
        bot.send_message(message.chat.id, f"–≤–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É –∞ –Ω–µ –Ω–∞–∑–≤—É —Ç–µ–º–∏ –±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, jurnal1_tema_2 , db_filename, user_grypa, subject, table,column_names,tema)
    else:


        table_name = f"{subject}_{table}"

        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute(f"ALTER TABLE {table_name} RENAME COLUMN '{tema}' TO '{tema_new}'")
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–¢–µ–º—É –ø—ñ–¥ –Ω–∞–∑–≤–æ—é {tema} —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ—ñ–º–µ–Ω–æ–≤–∞–Ω–æ –Ω–∞ {tema_new}\n–¢–µ–ø–µ—Ä –¥–æ–¥–∞–º–æ —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        info = types.KeyboardButton('–ü—Ä–∞–∫—Ç–∏—á–Ω–∞')
        info2 = types.KeyboardButton('–õ–µ–∫—Ü—ñ—è')
        markup.add(info)
        markup.add(info2)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–Ω—è—Ç—Ç—è —ñ–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏—â–µ", reply_markup=markup)
        bot.register_next_step_handler(message, jurnal1_tema_3, db_filename, user_grypa, subject, table, column_names, tema_new)
def jurnal1_tema_3(message, db_filename, user_grypa, subject, table,column_names,tema_new):
    text = message.text
    if text == '–ü—Ä–∞–∫—Ç–∏—á–Ω–∞' or text == '–õ–µ–∫—Ü—ñ—è':
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        text2 = "–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è"
        cursor.execute(f"UPDATE {subject}_{table} SET [{tema_new}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (text,text2))
        conn.commit()
        conn.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        info = types.KeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω–∞ –¥–∞—Ç–∞')
        info2 = types.KeyboardButton('–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É')
        markup.add(info)
        markup.add(info2)
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –¥–∞—Ç–∏", reply_markup=markup)
        bot.register_next_step_handler(message, jurnal1_tema_4, db_filename, user_grypa, subject, table, column_names,tema_new)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –Ω–µ–º–∞—î –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏ –∑–∞–Ω—è—Ç—Ç—è —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, jurnal1_tema_3, db_filename, user_grypa, subject, table,column_names,tema_new)
def jurnal1_tema_4(message, db_filename, user_grypa, subject, table,column_names,tema_new):
    text = message.text
    user_id = message.chat.id
    if text == '–ê–∫—Ç—É–∞–ª—å–Ω–∞ –¥–∞—Ç–∞':
        current_date = datetime.datetime.now()
        formatted_date = current_date.strftime("%d.%m.%Y")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        text2 = "–î–∞—Ç–∞"
        cursor.execute(f"UPDATE {subject}_{table} SET [{tema_new}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (formatted_date, text2))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞ {formatted_date} –¥–æ —Ç–µ–º–∏ {tema_new}")
        connect = sqlite3.connect('users.db')
        cursor1 = connect.cursor()
        cursor1.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
        user_rol = cursor1.fetchone()
        user_rol = user_rol[0]
        conn.close()
        connect.close()
        if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
            jurnal1_1(message)
        elif user_rol == '–≤–∏–∫–ª–∞–¥–∞—á':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
            homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
            item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item2)
            markup.add(homework)
            markup.add(item4)
            bot.send_message(message.chat.id,
                             "–í–∏ –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞–º –æ–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏".format(
                                 message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, menu_vikladacham_2)

    elif text == '–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É':
        bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º 01.01.2023")
        bot.register_next_step_handler(message, jurnal1_tema_5, db_filename, user_grypa, subject, table,column_names,tema_new)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–Ω—Ç—É –Ω–µ–º–∞—î –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–∞—Ç–∏ —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, jurnal1_tema_4, db_filename, user_grypa, subject, table,column_names,tema_new)
def jurnal1_tema_5(message, db_filename, user_grypa, subject, table,column_names,tema_new):
    text = message.text
    lines = text.split(".")
    notcifra = []
    user_id = message.chat.id
    i = 0
    if len(lines) > 3:
        bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞\n–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º 01.01.2023")
        bot.register_next_step_handler(message, jurnal1_tema_5, db_filename, user_grypa, subject, table,column_names,tema_new)
    elif text.startswith('/'):
        bot.send_message(message.chat.id, f"–í–∏ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –¥–∞—Ç—É, —è–∫—É –º–∞—î—Ç–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–æ–¥–∞—Ç–∏")
        bot.register_next_step_handler(message, jurnal1_tema_5, db_filename, user_grypa, subject, table,column_names,tema_new)
    else:

        for item in lines:
            if item.isdigit():
                i += 1
            else:
                notcifra.append(item)

    if len(notcifra) > 0:
        bot.send_message(message.chat.id, "–ù–µ –ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞\n–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–∞ –∑—Ä–∞–∑–∫–æ–º 01.01.2023")
        bot.register_next_step_handler(message,  jurnal1_tema_5, db_filename, user_grypa, subject, table,column_names,tema_new)
    else:
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        text2 = "–î–∞—Ç–∞"
        cursor.execute(f"UPDATE {subject}_{table} SET [{tema_new}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (text, text2))
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ –¥–æ–¥–∞–Ω–∞ {text} –¥–æ —Ç–µ–º–∏ {tema_new}")
        connect = sqlite3.connect('users.db')
        cursor1 = connect.cursor()
        cursor1.execute(f"SELECT roli FROM login_id WHERE id = {user_id}")
        user_rol = cursor1.fetchone()
        user_rol = user_rol[0]
        conn.close()
        connect.close()
        if user_rol == '—Å—Ç–∞—Ä–æ—Å—Ç–∞':
            jurnal1_1(message)
        elif user_rol == '–≤–∏–∫–ª–∞–¥–∞—á':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item2 = types.KeyboardButton('–†–æ–±–æ—Ç–∞ –∑ –∂—É—Ä–Ω–∞–ª–∞–º–∏')
            homework = types.KeyboardButton('–î–æ–¥–∞—Ç–∏ –¥–æ–º–∞—à–Ω—î')
            item4 = types.KeyboardButton('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –≥—Ä—É–ø–∏')
            back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
            markup.add(back)
            markup.add(item2)
            markup.add(homework)
            markup.add(item4)
            bot.send_message(message.chat.id,
                             "–í–∏ –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –≤–∏–∫–ª–∞–¥–∞—á–∞–º –æ–±–µ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é –∑ —è–∫–æ—é —Ö–æ—á–µ—Ç–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏".format(
                                 message.from_user), reply_markup=markup)
            bot.register_next_step_handler(message, menu_vikladacham_2)









def jurnal1_5_1(message, db_filename, user_grypa,  table_name,column_names,subject,table):
    tema = message.text
    if tema == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    elif tema in column_names:
        bot.send_message(message.chat.id,"–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ —ó—Ö–Ω—î –ø–æ–≤–Ω–µ —ñ–º\'—è.\n–ó–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º‚¨áÔ∏è\n–¢–∞–∫–æ–∂ —è –Ω–∞–¥—ñ—à–ª—é –≤–∞–º —Å–ø–∏—Å–æ–∫ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏, –¥–ª—è –∑—Ä—É—á–Ω—ñ—à–æ–≥–æ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ—Ü—ñ–Ω–æ–∫")
        bot.send_message(message.chat.id,"–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –æ—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë(–û–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫–∞) - –æ—Ü—ñ–Ω–∫–∞")
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()

        # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–≤–ø—Ü—è "–°—Ç—É–¥–µ–Ω—Ç–∏" —Ç–∞–±–ª–∏—Ü—ñ "STUDENTY"
        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        students_list = "\n".join([student[0] + ' - ' for student in students])



        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –±–æ—Ç–∞
        bot.send_message(message.chat.id, f"<code>{students_list}</code>", parse_mode=ParseMode.HTML)
        conn.close()
        bot.register_next_step_handler(message,jurnal1_5_2, db_filename, user_grypa,  table_name,tema,subject,table)
def jurnal1_5_2(message, db_filename, user_grypa, table_name, tema,subject,table):
    text = message.text
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    rows = text.split("\n")
    split = []
    splitnot = []
    for row in rows:
        student_data = row.split(" - ")
        if len(student_data) == 2:
            split.append(row)

        else:
            splitnot.append(row)


    if len(splitnot) == 0:
        for row in split:
            student_data = row.split(" - ")
            name, grade = student_data
            cursor.execute(
                f"UPDATE {table_name} SET [{tema}] = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",
                (grade, name))

        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
        jurnal1_5_dodavanna_ocinok(message, db_filename, table_name, subject)

    elif len(splitnot) > 0:
        list = tuple(splitnot)
        message_text = "\n\n".join(list)
        bot.send_message(message.chat.id, f"{message_text} –û—Å—å —Ü—ñ —Ä—è–¥–∫–∏ —è –Ω–µ –∑–º—ñ–≥ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑ —ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º\n\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞\n–ü–Ü–ë - –û—Ü—ñ–Ω–∫–∞")
        bot.register_next_step_handler(message, jurnal1_5_2, db_filename, user_grypa, table_name, tema, subject, table)
def jurnal1_5_dodavanna_ocinok(message,db_filename, table_name, subject):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    column_names = column_names = [column[1] for column in columns if
                                   column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–º–æ–¥—É–ª—å_1' and column[1] != '–º–æ–¥—É–ª—å_2' and
                                   column[1] != '–ù']

    modylchislo = table_name[-1]
    module = f"–º–æ–¥—É–ª—å_{modylchislo}"
    modyl = 0
    H = 0
    # –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–µ–º –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    students_topics = {}
    for column_name in column_names:
        cursor.execute(f"SELECT –°—Ç—É–¥–µ–Ω—Ç–∏, [{column_name}] FROM {table_name}")
        results = cursor.fetchall()
        for row in results:
            student = row[0]
            topic_value = row[1]
            if student not in students_topics:
                students_topics[student] = []
            students_topics[student].append(topic_value)

    students_topics.pop(next(iter(students_topics)))

    for i in students_topics:
        for k in range(len(students_topics[i])):
            if students_topics[i][k] == None:
                continue
            elif students_topics[i][k] == '–Ω' or students_topics[i][k] == '–ù':
                H += 1

            elif students_topics[i][k] in ['–õ–µ–∫—Ü—ñ—è', '–ü—Ä–∞–∫—Ç–∏—á–Ω–∞', '–°–µ–º—ñ–Ω–∞—Ä', '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ñ —Ä–æ–±–æ—Ç–∏']:
                continue
            elif students_topics[i][k].isdigit():
                students_topics[i][k] = int(students_topics[i][k])
                modyl += students_topics[i][k]
        modyl = str(modyl)


        cursor.execute(f"UPDATE {table_name} SET {module} = ?, –ù = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (modyl, H, i))

        modyl = 0
        H = 0
    # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn.commit()

    # –ó–∞–∫—Ä–∏—Ç—Ç—è –∫—É—Ä—Å–æ—Ä–∞ —Ç–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    cursor.close()
    conn.close()
    jurnal1_5_dodavanna_ocinok_v_inshy_table(message,db_filename, table_name, subject)
def jurnal1_5_dodavanna_ocinok_v_inshy_table(message,db_filename,table_name, subject):
    subject = subject.replace(' ','_')
    pred = subject

    modylchislo = table_name[-1]
    module = f"–º–æ–¥—É–ª—å_{modylchislo}"


    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"SELECT –°—Ç—É–¥–µ–Ω—Ç–∏, {module} FROM {table_name}")
    OCIN =cursor.fetchall()
    OCIN.remove(OCIN[0])



    for i in OCIN:

        if len(i) == 2:
            name, grade = i
            cursor.execute(f"UPDATE {pred}_3 SET {module} = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",(grade,name))
            cursor.execute(f"UPDATE {pred}_–°—Ç—É–¥–µ–Ω—Ç–∏ SET {module} = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (grade,name))

    conn.commit()
    conn.close()
    jurnal1_5_dodavanna_ocinok_v_inshy_table2(message,db_filename, table_name,pred)
def jurnal1_5_dodavanna_ocinok_v_inshy_table2(message,db_filename,table_name,pred):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA table_info({pred}_3)")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns if column[1] != '–ö—É—Ä—Å–æ–≤–∞(—è–∫—â–æ_—î)' and column[1] != '–ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤']
    columns_str = ', '.join(column_names)
    cursor.execute(f"SELECT {columns_str} FROM {pred}_3")
    results = cursor.fetchall()
    results.remove(results[0])

    supisok = []
    for i in results:
        suma_ocin = 0
        for index, k in enumerate(i):
            if index == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
                continue
            if k is None:
                continue
            else:
                suma_ocin += int(k)
        supisok.append((i[0], str(suma_ocin)))  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä—Ç–µ–∂ –∑ —ñ–º'—è–º —ñ —Å—É–º–æ—é
    for i in supisok:
        if len(i)== 2:
            name, grade = i
            cursor.execute(f"UPDATE {pred}_3 SET –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?", (grade, name))

    conn.commit()
    conn.close()
    jurnal1_5_dodavanna_ocinok_v_inshy_table2_1(message,db_filename, table_name,pred)
def jurnal1_5_dodavanna_ocinok_v_inshy_table2_1(message,db_filename,table_name,pred):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()
    cursor.execute(f"SELECT –°—Ç—É–¥–µ–Ω—Ç–∏, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ FROM {pred}_3")
    results = cursor.fetchall()
    results.remove(results[0])


    for i in results:
        if len(i) == 2:
            name, grade = i
            cursor.execute(f"UPDATE {pred}_–°—Ç—É–¥–µ–Ω—Ç–∏ SET –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ = ? WHERE –°—Ç—É–¥–µ–Ω—Ç–∏ = ?",(grade, name))

    conn.commit()
    conn.close()
    message_handler_start(message)



def jurnal2_1(message, user_grypa):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏
    conn = sqlite3.connect(f"{user_grypa}.db")
    cursor = conn.cursor()

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ STUDENTY
    cursor.execute("CREATE TABLE IF NOT EXISTS STUDENTY (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT)")

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ü—Ä–µ–¥–º–µ—Ç–∏
    cursor.execute("CREATE TABLE IF NOT EXISTS –ü—Ä–µ–¥–º–µ—Ç–∏ (–ü—Ä–µ–¥–º–µ—Ç–∏ TEXT,–ö—Ä–µ–¥–∏—Ç–∏_–Ñ–ö–¢–° TEXT,–§–æ—Ä–º–∞_–ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ_–∫–æ–Ω—Ç—Ä–æ–ª—é TEXT,–ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_1 TEXT,–ó–∞–∫—Ä–∏—Ç–∏–π_–º–æ–¥—É–ª—å_2 TEXT, –ó–∞–∫—Ä–∏—Ç–∏–π_–ø—Ä–µ–¥–º–µ—Ç TEXT)")
    #–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–µ–∫—Ü—ñ–π–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
    cursor.execute("CREATE TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É1 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É2 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É3 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É4 TEXT)")
    cursor.execute("CREATE TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_–í—ñ–≤—Ç–æ—Ä–æ–∫ (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É1 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É2 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É3 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É4 TEXT)")
    cursor.execute("CREATE TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_–°–µ—Ä–µ–¥–∞ (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É1 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É2 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É3 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É4 TEXT)")
    cursor.execute("CREATE TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_–ß–µ—Ç–≤–µ—Ä (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É1 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É2 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É3 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É4 TEXT)")
    cursor.execute("CREATE TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_–ü—è—Ç–Ω–∏—Ü—è (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É1 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É2 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É3 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É4 TEXT)")
    cursor.execute("CREATE TABLE –ª–µ–∫—Ü—ñ–π–Ω–∏–π_–°—É–±–æ—Ç–∞ (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É1 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É2 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É3 TEXT,–ù–∞–∑–≤–∞–ø—Ä–µ–¥–º–µ—Ç—É4 TEXT)")
    cursor.execute("CREATE TABLE –õ–µ–∫—Ü—ñ–π–Ω–∏–π_–¢–∏–∂–¥–µ–Ω—å (–õ–µ–∫—Ü—ñ–π–Ω–∏–π_–¢–∏–∂–¥–µ–Ω—å TEXT)")
    cursor.execute(f'INSERT INTO –õ–µ–∫—Ü—ñ–π–Ω–∏–π_–¢–∏–∂–¥–µ–Ω—å VALUES (NULL)')
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn.commit()

    # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn.close()
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤–∞—à–æ—ó –≥—Ä—É–ø–∏ –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º", reply_markup=None)
    bot.send_message(message.chat.id, "–ü—Ä—ñ–∑–≤–∏—â–µ —ñ–º'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ\n–ü—Ä—ñ–∑–≤–∏—â–µ —ñ–º'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ\n–ü—Ä—ñ–∑–≤–∏—â–µ —ñ–º'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ\n–ü—Ä—ñ–∑–≤–∏—â–µ —ñ–º'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ\n–ü—Ä—ñ–∑–≤–∏—â–µ —ñ–º'—è –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ")
    bot.register_next_step_handler(message, jurnal2_2, user_grypa)
def jurnal2_2(message, user_grypa):
    text = message.text
    # –ó–Ω–∞–∫–∏, —è–∫—ñ –º–∏ —Ö–æ—á–µ–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏
    characters_to_remove = '().:;\|/,+#*%@$&?!~"1234567890'
    text = ''.join(filter(lambda x: not x.isdigit(), text))

    # –í–∏–¥–∞–ª—è—î–º–æ –∑–Ω–∞–∫–∏ –∑ —Ç–µ–∫—Å—Ç—É
    for char in characters_to_remove:
        text = text.replace(char, '')
    #
    abzac = text.split('\n')
    num_paragraphs = len(abzac)
    num_paragraphs = num_paragraphs - 1
    text = text.split('\n')
    text.sort()

    pravelni = []
    nepravelni = []
    for i in range(len(text)):
        reversed_string = text[i].rsplit()
        if len(reversed_string) < 2 or len(reversed_string) > 3:
            p = ' '.join(reversed_string)
            nepravelni.append(p)

        elif len(reversed_string) == 2 or len(reversed_string) == 3:
            p = ' '.join(reversed_string)
            pravelni.append(p)


    if len(nepravelni) > 0:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ —à–æ—Å—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –º–∞–±—É—Ç—å –≤–∏ —è–∫–∏—Ö–æ—Å—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≤–∫–∞–∑—É–≤–∞–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ü–Ü–ë —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü")
        bot.register_next_step_handler(message, jurnal2_2, user_grypa)
    else:

        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT –ü–Ü–ü FROM Email_Base")
        rows = cursor.fetchall()
        pip = [row[0] for row in rows]
        mana = []
        mananot = []

        for student in text:
            if student in pip:
                mana.append(student)
            elif student not in pip:
                mananot.append(student)
        if len(mananot) > 0:
            str1 = ''
            for i in mananot:
                str1 += i + "\n"
            bot.send_message(message.chat.id,f"–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Å—å —Ü—ñ –ü–Ü–ë\n\n\n{str1}\n\n–≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–∏ —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü –∫–æ–∂–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç")
            bot.register_next_step_handler(message, jurnal2_2, user_grypa)
        elif len(mananot) == 0:

            jurnal2_3(message, user_grypa, text)
def jurnal2_3(message,user_grypa,text):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–¢–∞–∫ –≤—Å–µ –≤—ñ—Ä–Ω–æ')
    item2 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫')
    markup.add(item1)
    markup.add(item2)
    bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ –º–µ–Ω—ñ —Å–ø–∏—Å–æ–∫ —Å–≤–æ—ó—Ö –æ–¥–Ω–æ–≥—Ä—É–ø–Ω–∏–∫—ñ–≤".format(message.from_user), reply_markup=markup)
    bot.register_next_step_handler(message,jurnal2_4,user_grypa,text)
def jurnal2_4(message,user_grypa,text):
    vid = message.text


    if vid == '–¢–∞–∫ –≤—Å–µ –≤—ñ—Ä–Ω–æ':

        bot.send_message(message.chat.id, "–í–Ω–æ—à—É –≤ –±–∞–∑—É...", reply_markup=telebot.types.ReplyKeyboardRemove())
        time.sleep(2)
        jurnal2_5(message, user_grypa, text)

    elif vid == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø–∏—Å–æ–∫':
        jurnal2_1(message, user_grypa)

    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –Ω–∞—è–≤–∏—Ö –∫–Ω–æ–ø–æ–∫")
        bot.register_next_step_handler(message, jurnal2_4, user_grypa, text)
def jurnal2_5(message,user_grypa,text):
    conn = sqlite3.connect(f"{user_grypa}.db")
    cursor = conn.cursor()


    for row in text:
        cursor.execute("INSERT INTO STUDENTY (–°—Ç—É–¥–µ–Ω—Ç–∏) VALUES (?)", (row,))

    conn.commit()
    bot.send_message(message.chat.id, "–ó–±–µ—Ä–µ–∂–µ–Ω–æ‚úÖ")
    bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∂—É—Ä–Ω–∞–ª—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤–Ω—ñ –Ω–∞–∑–≤–∏ —Å–≤–æ—ó—Ö –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω —Ü—å–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä—É –∑–∞ —Ç–∞–∫–∏–º –∑—Ä–∞–∑–∫–æ–º.\n\n–ü—Ä–µ–¥–º–µ—Ç - (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤ –Ñ–ö–¢–°),(—Ñ–æ—Ä–º–∞ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é)\n–ü—Ä–µ–¥–º–µ—Ç‚Ññ2 - (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç—ñ–≤),(—Ñ–æ—Ä–º–∞ –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é)\n\n–ù–∞–¥—Å–∏–ª–∞—Ç–∏ –ü–Ü–ë –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤, —è–∫—ñ –≤–µ–¥—É—Ç—å —É –≤–∞—Å —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æü´†")
    bot.register_next_step_handler(message, jurnal2_6, user_grypa)
def jurnal2_6(message,user_grypa):
    pred = message.text
    predmety = pred
    lines = pred.split('\n')
    list = []
    subject_list = []

    for i in lines:
        elements = i.split(',')
        if len(elements) != 2:

            list.append("–ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞ -" + i)
            continue
        a = elements[0].split("-")
        if len(a) != 2:

            list.append("–ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞ (–Ω–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–±–∏—Ç–∏ –ø–æ –¥–µ—Ñ—ñ—Å—É) -" + i)
            continue
        t = tuple(k.strip() for k in a)
        subject_list.append(t + (elements[1].strip(),))

    list = tuple(list)
    message_text = "\n\n".join(list)



    message_text2 = "\n\n".join([f'{item[0]} - {item[1]}, {item[2]}' for item in subject_list])

    if len(list) > 0:
        if len(subject_list) > 0:
            bot.send_message(message.chat.id,f"{message_text}\n —Ç—É—Ç –≤–∏–≤–µ–¥–µ–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏, —è–∫—ñ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n\n{message_text2}\n–ê –æ—Å—å —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ñ\n–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞ –∑—Ä–∞–∑–∫–æ–º")
            bot.register_next_step_handler(message, jurnal2_6, user_grypa)
        elif len(subject_list) == 0:
            bot.send_message(message.chat.id, f"{message_text}\n —Ç—É—Ç –≤–∏–≤–µ–¥–µ–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏, —è–∫—ñ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.–í–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ —Ä–∞–∑ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ –∑–∞ –∑—Ä–∞–∑–∫–æ–º")
            bot.register_next_step_handler(message, jurnal2_6, user_grypa)
    else:
        jurnal2_6_1(message, user_grypa, predmety)
def jurnal2_6_1(message,user_grypa,predmety):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–¢–∞–∫ –≤—Å–µ –≤—ñ—Ä–Ω–æ')
    item2 = types.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏')
    markup.add(item1)
    markup.add(item2)
    bot.send_message(message.chat.id,"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–ª–∏ —É—Å—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —Ç–∞ —ó—Ö —Ñ–æ—Ä–º—É –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é —ñ –∫—Ä–µ–¥–∏—Ç–∏ ",
                     reply_markup=markup)
    bot.send_message(message.chat.id, f"<code>{predmety}</code>", parse_mode=ParseMode.HTML)
    bot.register_next_step_handler(message, jurnal2_7, user_grypa, predmety)
def jurnal2_7(message,user_grypa, predmety):
    vid = message.text

    if vid == '–¢–∞–∫ –≤—Å–µ –≤—ñ—Ä–Ω–æ':

        bot.send_message(message.chat.id, "–ü—Ä–æ–≤—ñ—Ä—è—é –≤–∞—à—ñ –ø—Ä–µ–¥–º–µ—Ç–∏...", reply_markup=telebot.types.ReplyKeyboardRemove())
        time.sleep(2)
        jurnal2_8(message, user_grypa, predmety)


    elif vid == '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏':
        bot.send_message(message.chat.id,"–ë—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —â–µ —Ä–∞–∑ –≤–∞—à—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ —ñ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ)", reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message,jurnal2_6, user_grypa)
    else:
        bot.send_message(message.chat.id,"–¢–∞–∫–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–º–∞—î –≤–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ –Ω–∞—è–≤–∏—Ö –∫–Ω–æ–ø–æ–∫")
        bot.register_next_step_handler(message,jurnal2_7,user_grypa, predmety)
def jurnal2_8(message, user_grypa, predmety):
    subjects = predmety.split('\n')
    subject_list = []


    for subject in subjects:
        subject_parts = subject.split(' - ')
        if len(subject_parts) == 2:
            subject_name = subject_parts[0].strip().lower()
            credits_exam_parts = subject_parts[1].split(',')

            if len(credits_exam_parts) == 2:
                credits = credits_exam_parts[0].strip()
                exam_type = credits_exam_parts[1].strip().lower()

                subject_tuple = (subject_name, credits, exam_type)
                subject_list.append(subject_tuple)
    q=0
    for i in subject_list:
        if i[2] != "–∑–∞–ª—ñ–∫" and i[2] != '–µ–∫–∑–∞–º–µ–Ω':
            q += 1
            bot.send_message(message.chat.id, "–ë–∞—á—É –≤ –ø—Ä–µ–¥–º–µ—Ç—ñ " + i[0] + " –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤—ñ—Ä–Ω—É –§–æ—Ä–º—É –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∫–∞–∂—ñ—Ç—å —â–µ —Ä–∞–∑ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏")

    if q > 0:
        bot.register_next_step_handler(message, jurnal2_6, user_grypa)

    else:
        str1 = ''
        conn = sqlite3.connect("users.db")
        cursor = conn.cursor()
        cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏–§—ñ–∑–º–∞—Ç—É FROM –ü—Ä–µ–¥–º–µ—Ç–∏–§—ñ–∑–º–∞—Ç—É")
        result = cursor.fetchall()
        result = [item.lower() for tpl in result for item in tpl]

        for i in subject_list:
            if i[0] not in result:
                str1 += i[0] + ' - ' + '–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ —ñ—Å–Ω—É—î' + '\n'
        if len(str1) > 0:
            bot.send_message(message.chat.id, str1)
            bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –≤—Å—ñ —Å–≤–æ—ó –ø—Ä–µ–¥–º–µ—Ç–∏ —â–µ —Ä–∞–∑")
            bot.register_next_step_handler(message, jurnal2_6, user_grypa)
        else:
            conn = sqlite3.connect(f"{user_grypa}.db")
            cursor = conn.cursor()

            for subject_tuple in subject_list:
                subject_name, credits, exam_type = subject_tuple

                cursor.execute("INSERT INTO –ü—Ä–µ–¥–º–µ—Ç–∏ (–ü—Ä–µ–¥–º–µ—Ç–∏, –ö—Ä–µ–¥–∏—Ç–∏_–Ñ–ö–¢–°, –§–æ—Ä–º–∞_–ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ_–∫–æ–Ω—Ç—Ä–æ–ª—é) VALUES (?, ?, ?)", (subject_name, credits, exam_type))

            conn.commit()
            conn.close()
            bot.send_message(message.chat.id, "–°—Ç–≤–æ—Ä—é—é —Ç–∞–±–ª–∏—Ü—ñ –∑ –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏...")
            jurnal2_9(message, user_grypa)
def jurnal2_9(message,user_grypa):
    conn = sqlite3.connect(f"{user_grypa}.db")
    cursor = conn.cursor()
    cursor.execute("SELECT –ü—Ä–µ–¥–º–µ—Ç–∏, –§–æ—Ä–º–∞_–ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ_–∫–æ–Ω—Ç—Ä–æ–ª—é FROM –ü—Ä–µ–¥–º–µ—Ç–∏")
    result = cursor.fetchall()
    result = [(item[0].replace(" ", "_"), item[1]) for item in result]

    cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
    students = cursor.fetchall()

    for row in result:
        pre, exam_type = row
        cursor.execute(f'CREATE TABLE "{pre}_1" ( –°—Ç—É–¥–µ–Ω—Ç–∏ TEXT, –º–æ–¥—É–ª—å_1 TEXT, –ù TEXT, [—Ç–µ–º–∞ 0] TEXT,[—Ç–µ–º–∞ 1] TEXT, [—Ç–µ–º–∞ 2] TEXT, [—Ç–µ–º–∞ 3] TEXT, [—Ç–µ–º–∞ 4] TEXT, [—Ç–µ–º–∞ 5] TEXT, [—Ç–µ–º–∞ 6] TEXT, [—Ç–µ–º–∞ 7] TEXT,  [—Ç–µ–º–∞ 8] TEXT, [—Ç–µ–º–∞ 9] TEXT)')
        cursor.execute(f'INSERT INTO "{pre}_1" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_1, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–î–∞—Ç–∞", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')
        cursor.execute(f'INSERT INTO "{pre}_1" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_1, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')

        cursor.execute(f'CREATE TABLE "{pre}_2" ( –°—Ç—É–¥–µ–Ω—Ç–∏ TEXT, –º–æ–¥—É–ª—å_2 TEXT, –ù TEXT, [—Ç–µ–º–∞ 0] TEXT,[—Ç–µ–º–∞ 1] TEXT, [—Ç–µ–º–∞ 2] TEXT, [—Ç–µ–º–∞ 3] TEXT, [—Ç–µ–º–∞ 4] TEXT, [—Ç–µ–º–∞ 5] TEXT, [—Ç–µ–º–∞ 6] TEXT, [—Ç–µ–º–∞ 7] TEXT,  [—Ç–µ–º–∞ 8] TEXT, [—Ç–µ–º–∞ 9] TEXT)')
        cursor.execute(f'INSERT INTO "{pre}_2" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_2, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–î–∞—Ç–∞",NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')
        cursor.execute(f'INSERT INTO "{pre}_2" ("–°—Ç—É–¥–µ–Ω—Ç–∏", –º–æ–¥—É–ª—å_2, –ù, [—Ç–µ–º–∞ 0], [—Ç–µ–º–∞ 1], [—Ç–µ–º–∞ 2], [—Ç–µ–º–∞ 3], [—Ç–µ–º–∞ 4], [—Ç–µ–º–∞ 5], [—Ç–µ–º–∞ 6], [—Ç–µ–º–∞ 7], [—Ç–µ–º–∞ 8], [—Ç–µ–º–∞ 9]) VALUES ("–¢–∏–ø –∑–∞–Ω—è—Ç—Ç—è", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)')

        cursor.execute(f'CREATE TABLE "{pre}_3" ("–°—Ç—É–¥–µ–Ω—Ç–∏" TEXT,–Ü–Ω–¥–∑ TEXT, –º–æ–¥—É–ª—å_1 TEXT, –º–æ–¥—É–ª—å_2 TEXT, [{exam_type}] TEXT,–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏ TEXT, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ TEXT)')


        cursor.execute(f'CREATE TABLE "{pre}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏" (–°—Ç—É–¥–µ–Ω—Ç–∏ TEXT)')



        cursor.execute(f'CREATE TABLE "{pre}_–°—Ç—É–¥–µ–Ω—Ç–∏" ("–°—Ç—É–¥–µ–Ω—Ç–∏" TEXT,–Ü–Ω–¥–∑ TEXT, –º–æ–¥—É–ª—å_1 TEXT, –º–æ–¥—É–ª—å_2 TEXT, [{exam_type}] TEXT,–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏ TEXT, –ó–∞–≥–∞–ª—å–Ω–∞_–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞–ª—ñ–≤ TEXT)')
        #cursor.execute(f'INSERT INTO "{pre}_–°—Ç—É–¥–µ–Ω—Ç–∏" ("–°—Ç—É–¥–µ–Ω—Ç–∏", [–º–æ–¥—É–ª—å 1], [–º–æ–¥—É–ª—å 2], [—ñ–Ω–¥–∑], [–ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å], [–∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤]) VALUES ("–î–∞—Ç–∞", NULL, NULL, NULL, NULL, NULL)')

        for student in students:
            cursor.execute(f"INSERT INTO \"{pre}_1\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
            cursor.execute(f"INSERT INTO \"{pre}_2\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
            cursor.execute(f"INSERT INTO \"{pre}_3\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
            cursor.execute(f"INSERT INTO \"{pre}_–°—Ç—É–¥–µ–Ω—Ç–∏\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
            cursor.execute(f"INSERT INTO \"{pre}_–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ_–≥–æ–¥–∏–Ω–∏\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
        days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫","–í—ñ–≤—Ç–æ—Ä–æ–∫","–°–µ—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä","–ü—è—Ç–Ω–∏—Ü—è","–°—É–±–æ—Ç–∞"]
        for student in students:
            for i in days:
                cursor.execute(f"INSERT INTO \"–ª–µ–∫—Ü—ñ–π–Ω–∏–π_{i}\" (\"–°—Ç—É–¥–µ–Ω—Ç–∏\") VALUES (?)", (str(student[0]),))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–¢–∞–±–ª–∏—Ü—ñ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ‚úÖ")
    message_handler_start(message)



def redaguvanna(message,user_id):
    den = message.text
    if den == "üîô–ù–∞–∑–∞–¥":
        menu_starostam(message)
    elif den not in ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫','–í—ñ–≤—Ç–æ—Ä–æ–∫','–°–µ—Ä–µ–¥–∞','–ß–µ—Ç–≤–µ—Ä','–ü\'—è—Ç–Ω–∏—Ü—è']:
        bot.send_message(user_id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –¥–µ–Ω—å, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —ñ–∑ –Ω–∞—è–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫: ")
        bot.register_next_step_handler(message, redaguvanna, user_id)
    else:
        key = types.ReplyKeyboardMarkup(resize_keyboard=True)
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute(f"SELECT grypa FROM login_id WHERE id = {user_id}")
        user_grypa = cursor.fetchone()[0]
        back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
        key.add(back)
        bot.send_message(message.chat.id, f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ {den}, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–∫–ª–∞.\n–ó–ê –¢–ê–ö–ò–ú –ó–†–ê–ó–ö–û–ú!!!", reply_markup=key)
        #–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –¥–æ–ø–∏—à–∏ —è–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç–∏
        bot.send_message(message.chat.id,'–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤–∏ –ø–∞—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —ó—Ö –ø–æ—Ä—è–¥–∫—É, —è–∫—â–æ —É –≤–∞—Å –≤—ñ–∫–Ω–æ —Ç–æ–±—Ç–æ –Ω–µ –º–∞—î –ø–∞—Ä–∏, —Ç–æ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏ —ó—ó –Ω—É–º–µ—Ä–∞—Ü—ñ—é, –∞–±–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø—Ä–æ—á–µ—Ä–∫')
        redaguvanna2(message, user_id, user_grypa, den)
def redaguvanna2(message, user_id,user_grypa,den):
    days = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü\'—è—Ç–Ω–∏—Ü—è']
    den_123 = days.index(den)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –∑ —Ç–∞–±–ª–∏—Ü—ñ "rosklad_–°–û–Ü–ú_23"
    cursor.execute(f'SELECT * FROM rosklad_{user_grypa}')
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ)
    first_row = cursor.fetchall()[den_123]

    mess = ''
    for j, item in enumerate(first_row):
        if item is not None:
            mess += f"{j + 1}. {item}\n"

    bot.send_message(user_id, f'\n<code>{mess}</code>', parse_mode=ParseMode.HTML)
    bot.register_next_step_handler(message, redaguvanna3, user_grypa, user_id, den_123)
    # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
    cursor.close()
    conn.close()
def redaguvanna3(message, user_grypa, user_id, den_123):
    text = message.text  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if text == 'üîô–ù–∞–∑–∞–¥':
        menu_starostam(message)
    else:
        try:


            # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ –æ–∫—Ä–µ–º—ñ —Ä—è–¥–∫–∏
            lines = text.split('\n')

            result = [None] * 5  # –†–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ—Ä—Ç–µ–∂) –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º None

            for line in lines:
                # –†–æ–∑–±–∏–≤–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ —ñ–Ω–¥–µ–∫—Å —ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                index, value = line.split('. ', 1)

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ–Ω–¥–µ–∫—Å —î —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 5
                if index.isdigit() and 1 <= int(index) <= 5:
                    result[int(index) - 1] = value

            # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∫–æ—Ä—Ç–µ–∂)
            result = tuple(result)
            bot.send_message(user_id, "–†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω–æ")
            redaguvanna4(message, user_grypa, user_id, den_123, result )

        except Exception as e:
           bot.send_message(user_id, '–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø–æ –∑—Ä–∞–∑–∫—É, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —â–µ —Ä–∞–∑ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∑–∞ –∑—Ä–∞–∑–∫–æ–º')
           bot.send_message(user_id,'<code>1. (–ù–∞–∑–≤–∞ –ø–∞—Ä–∏)\n2. (–ù–∞–∑–≤–∞ –ø–∞—Ä–∏)\n3. (–ù–∞–∑–≤–∞ –ø–∞—Ä–∏)\n4. (–ù–∞–∑–≤–∞ –ø–∞—Ä–∏)\n5. (–ù–∞–∑–≤–∞ –ø–∞—Ä–∏)</code>', parse_mode=ParseMode.HTML)
           bot.register_next_step_handler(message, redaguvanna3, user_grypa, user_id, den_123)
def redaguvanna4(message, user_grypa, user_id, den_123, result):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute(f'SELECT * FROM rosklad_{user_grypa}')
    rows = cursor.fetchall()
    rows[den_123] = result
    cursor.execute(f'DELETE FROM rosklad_{user_grypa}')
    cursor.executemany(f'INSERT INTO rosklad_{user_grypa} VALUES (?,?,?,?,?)', rows)
    conn.commit()
    cursor.close()
    conn.close()
    message_handler_start(message)
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Teachers WHERE –í–∏–∫–ª–∞–¥–∞—á=?", (call.data,))
    teacher_info = cursor.fetchone()
    conn.close()

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞
    teacher_name = teacher_info[0]
    phone_number = teacher_info[1]
    email = teacher_info[2]
    full_name = teacher_info[3]
    message_text = f"–í–∏–∫–ª–∞–¥–∞—á: {full_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n–ü–æ—à—Ç–∞: {email}"

    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=message_text)
def rozklad_par_0(message,user_id):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–°–û–§–Ü-11')
    item2 = types.KeyboardButton('–°–û–§–ê-12')
    item3 = types.KeyboardButton('–°–û–ú–Ü-13')
    item4 = types.KeyboardButton('–ö–ú-14')
    item5 = types.KeyboardButton('–°–û–Ü–ú-15')
    item6 = types.KeyboardButton('–Ü–Ü–ü-16')
    item7 = types.KeyboardButton('DA-17')
    item8 = types.KeyboardButton('–°–û–§–Ü-21')
    item9 = types.KeyboardButton('–°–û–ú–Ü-22')
    item10 = types.KeyboardButton('–°–û–Ü–ú-23')
    item11 = types.KeyboardButton('–°–û–§–ê-25')
    item12 = types.KeyboardButton('–ö–ù-26')
    item13 = types.KeyboardButton('–ö–ù-27')
    item14 = types.KeyboardButton('–°–û–§–Ü-31')
    item15 = types.KeyboardButton('–°–û–ú–Ü-32')
    item16 = types.KeyboardButton('–°–û–Ü–ú-33')
    item17 = types.KeyboardButton('–°–û–§–ê-35')
    item18 = types.KeyboardButton('–ö–ù-36')
    item19 = types.KeyboardButton('–°–û–§–Ü-41')
    item20 = types.KeyboardButton('–°–û–ú–Ü-42')
    item21 = types.KeyboardButton('–°–ûIM-43')
    item22 = types.KeyboardButton('–°–û–Ü–Ω—Å–∫-24')
    item23 = types.KeyboardButton('–º–°–û–§-11')
    item24 = types.KeyboardButton('–º–°–û–ú-12')
    item25 = types.KeyboardButton('–º–°–û–Ü–Ω-13')
    item26 = types.KeyboardButton('–º–°–û–§-21')
    item27 = types.KeyboardButton('–º–°–û–ú-22')
    item28 = types.KeyboardButton('–º–°–û–Ü–Ω-23')
    back = types.KeyboardButton('üîô–ù–∞–∑–∞–¥')
    keyboard.add(back)
    keyboard.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12, item13,
                 item14, item15, item16, item17, item18, item19, item20, item21, item22, item23, item24,
                 item25, item26, item27, item28)
    bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É:', reply_markup=keyboard)
    bot.register_next_step_handler(message, rozklad_par,user_id)
def rozklad_par(message,user_id):
    data = message.text
    if message.text == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)

    elif data not in ['–°–û–ú–Ü-32', '–°–û–Ü–ú-33', '–°–û–§–ê-35', '–ö–ù-36', '–º–°–û–§-11', '–º–°–û–ú-12', '–°–û–§–Ü-41', '–°–û–ú–Ü-42', '–°–ûIM-43',
          '–°–û–Ü–Ω—Å–∫-24', '–º–°–û–Ü–Ω-13', '–ö–ú-14', '–°–û–Ü–ú-15', '–Ü–Ü–ü-16', 'DA-17', '–°–û–§–Ü-21', '–°–û–§–Ü-21', '–°–û–ú–Ü-22',
          '–ö–ù-26', '–ö–ù-27', '–°–û–§–Ü-31', '–°–û–Ü–ú-23', '–°–û–§–ê-25', '–°–û–§–Ü-11', '–°–û–§–ê-12', '–°–û–ú–Ü-13', '–º–°–û–§-21', '–º–°–û–ú-22', '–º–°–û–Ü–Ω-23']:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≥—Ä—É–ø—É, –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É —ñ–∑ –Ω–∞—è–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫: ")
        bot.register_next_step_handler(message, rozklad_par,user_id)
    else:
        data = message.text.upper().replace('-', '_')
        bot.send_message(message.chat.id, "‚úÖ")
        rozklad_par2(message, data, user_id)
def rozklad_par2(message,data,user_id):

    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()
    cursor.execute(f"SELECT * FROM rosklad_{data}")
    dates = cursor.fetchall()
    days = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', '–ü`—è—Ç–Ω–∏—Ü—è']
    times = ['8:00-9:20', '9:35-10:55', '11:10-12:30', '12:45-14:05', '14:20-15:40']
    mess = ''
    for i, date in enumerate(dates):
        mess += days[i] + ':\n'
        for j, item in enumerate(date):
            if item is not None:
                mess += f"{times[j]} {j + 1}. {item}\n"
        mess += '\n'

    bot.send_message(user_id,"–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–∏ " + data.replace('_', '-') + ':\n\n' + mess)
    bot.register_next_step_handler(message, rozklad_par,user_id )
def update_email(message):
    new_email = message.text
    user_id = message.from_user.id
    if new_email == "/start" or new_email == "/menu" or new_email == '/support' or new_email == '/homework' or new_email == '/idea' or new_email == '/shurik' or new_email == '/legion':
        bot.send_message(message.chat.id,'–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –ø–æ—à—Ç—É –±—É–¥—å –ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –ø–æ—à—Ç—Éü•π')
        bot.register_next_step_handler(message, update_email)
    else:

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π email –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ "@fizmat.tnpu.edu.ua"
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM Email_Base WHERE Email_Address=?", (new_email,))
        row = cursor.fetchone()
        if row:
            conn = sqlite3.connect('users.db')
            cursor = conn.cursor()

            cursor.execute("UPDATE login_id SET email=? WHERE id=?", (new_email, user_id))
            conn.commit()

            conn.close()
            bot.send_message(message.chat.id, "ü¶¶–ü–æ—à—Ç—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
            message_handler_start(message)
        else:
            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email
            bot.send_message(message.chat.id,
                             "üôÖ–í–≤–µ–¥–µ–Ω–∞ email –∞–¥—Ä–µ—Å–∞ –Ω–µ —î —Ñ—ñ–∑–º–∞—Ç—ñ–≤—Å—å–∫–æ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑ —Å–≤–æ—é email –∞–¥—Ä–µ—Å—É")
            # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Ñ—É–Ω–∫—Ü—ñ—ó get_email –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≤–≤–æ–¥—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

            bot.register_next_step_handler(message, update_email)
def update_grypa(message):
    new_grypa = message.text.upper().replace('-', '_')
    user_id = message.from_user.id
    if new_grypa == "/start" or new_grypa == "/menu" or new_grypa == '/support' or new_grypa == '/homework' or new_grypa == '/idea' or new_grypa == '/shurik' or new_grypa == '/legion':
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –≥—Ä—É–ø—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É —ñ–∑ –∫–Ω–æ–ø–æ–∫.")
        bot.register_next_step_handler(message, update_grypa)
    elif message.text in ['–°–û–ú–Ü-32','–°–û–Ü–ú-33', '–°–û–§–ê-35', '–ö–ù-36', '–º–°–û–§-11', '–º–°–û–ú-12', '–°–û–§–Ü-41', '–°–û–ú–Ü-42', '–°–û–Ü–ú-43',
                              '–°–û–Ü–Ω—Å–∫-24', '–º–°–û–Ü–Ω-13','–ö–ú-14', '–°–û–Ü–ú-15', '–Ü–Ü–ü-16','DA-17', '–°–û–§–Ü-21', '–°–û–§–Ü-21', '–°–û–ú–Ü-22', '–ö–ù-26',
                              '–ö–ù-27', '–°–û–§–Ü-31','–°–û–ú–Ü-23', '–°–û–§–ê-25', '–°–û–§–Ü-11', '–°–û–§–ê-12', '–°–û–ú–Ü-13',]:
        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        cursor.execute("UPDATE login_id SET grypa=? WHERE id=?", (new_grypa, user_id))
        conn.commit()
        # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º –ø—Ä–æ –Ω–æ–≤—É –≥—Ä—É–ø—É
        bot.send_message(message.chat.id, "ü¶¶–ì—Ä—É–ø–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        conn.close()
        message_handler_start(message)
    else:
        bot.send_message(message.chat.id, "–í–∏ –≤–≤–µ–ª–∏ —â–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–µ –º–µ–Ω—ñ, –Ω–∞–ø–µ–≤–Ω–æ —Ü–µ –Ω–µ –≥—Ä—É–ø–∞(")
        bot.register_next_step_handler(message, update_grypa)
def update_first_last(message):
    new_first_last = message.text
    user_id = message.from_user.id
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä—ñ–∑–≤–∏—â–∞ —Ç–∞ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("UPDATE login_id SET first_last=? WHERE id=?", (new_first_last, user_id))
    conn.commit()
    # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    bot.send_message(message.chat.id, "ü¶¶–ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è –æ–Ω–æ–≤–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
    # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn.close()





def jurnal_prerglad_ocinok_dla_starost(message,db_filename,user_grypa,subject, table):
    conn = sqlite3.connect(db_filename)
    cursor = conn.cursor()

    # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ {subject}_{table}
    table_name = f'{subject}_{table}'

    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤ —Ç–∞–±–ª–∏—Ü—ñ
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    column_names = [column[1] for column in columns if
                    column[1] != '–°—Ç—É–¥–µ–Ω—Ç–∏' and column[1] != '–ù']

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –∑—ñ —Å–ø–∏—Å–∫—É column_names
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))
    for column_name in column_names:
        markup.add(column_name)

    bot.send_message(message.chat.id,"–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É, –∑ —è–∫–æ—ó –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –æ—Ü—ñ–Ω–∫–∏ —Å–≤–æ—ó—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∞–±–æ –∑—Ä–∞–∑—É –∑ —Ü—ñ–ª–æ–≥–æ –º–æ–¥—É–ª—è:",reply_markup=markup)
    bot.register_next_step_handler(message, jurnal_prerglad_ocinok_dla_starost_2, db_filename,user_grypa,subject, table, column_names)
def jurnal_prerglad_ocinok_dla_starost_2(message,db_filename,user_grypa,subject, table, column_names):
    text = message.text
    if text == 'üîô–ù–∞–∑–∞–¥':
        message_handler_start(message)
    elif text not in column_names:
        bot.send_message(message.chat.id, "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –Ω–µ –≤—ñ—Ä–Ω—É —Ç–µ–º—É –æ–±–µ—Ä—ñ—Ç—å —â–µ —Ä–∞–∑")
        bot.register_next_step_handler(message, jurnal_prerglad_ocinok_dla_starost_2, db_filename, user_grypa, subject, table,column_names)

    else:
        table_name = f'{subject}_{table}'
        conn = sqlite3.connect(db_filename)
        cursor = conn.cursor()
        cursor.execute("SELECT –°—Ç—É–¥–µ–Ω—Ç–∏ FROM STUDENTY")
        students = cursor.fetchall()
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        students_list = "\n".join([student[0] + ' - ' for student in students])

        cursor.execute(f"SELECT [{text}] FROM {table_name} ")
        ocinky = cursor.fetchall()
        ocinky = ocinky[2:]
        ocinky = [item for tpl in ocinky for item in tpl]
        ocinky2 = []
        for i in ocinky:
            if i == None:
                ocinky2.append("0")
            else:
                ocinky2.append(i)

        results = []
        students_list1 = students_list.split("\n")
        for k, i in enumerate(students_list1):
            results.append(i + ocinky2[k])

        gem = "\n".join([row for row in results])

        bot.send_message(message.chat.id, f"–û—Å—å –æ—Ü—ñ–Ω–∫–∏ —ñ–∑ –ø—Ä–µ–¥–º–µ—Ç—É {subject.replace('_', ' ')}\n{gem}")
        bot.register_next_step_handler(message, jurnal_prerglad_ocinok_dla_starost, db_filename, user_grypa, subject,table)


bot.polling(none_stop=True)
